[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing",
    "section": "",
    "text": "Welcome"
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Preface",
    "section": "",
    "text": "This is a book created to be used for a statistical computing course at the undergraduate level."
  },
  {
    "objectID": "basics.html#introduction",
    "href": "basics.html#introduction",
    "title": "1  Basic R Programming",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\nThis chapter focuses on the basics of R programming. While most of your statistical analysis will be done with R functions, it is important to at least have an idea of what is going on. Additionally, we will cover other topics that you may or may not need to know. The topics we will cover are:\n\nBasic calculations in R\nTypes of Data\nR Objects\n\nThere are many other topics that should be covered, but it may be unnecessary. If you are interested in those topics, I recommend using the ‘swirl’ package."
  },
  {
    "objectID": "basics.html#basic-calculations",
    "href": "basics.html#basic-calculations",
    "title": "1  Basic R Programming",
    "section": "1.2 Basic Calculations",
    "text": "1.2 Basic Calculations\nThis section focuses the basic calculation that you can do in R. Essentially, we look at how R can be used as a calculator. This is done by using different operators in R. An operator is a symbol that tells R to do something. Some common operators are +,-, and * which corresponds to addition, subtraction, and division.\n\n1.2.1 Calculator\n\n1.2.1.1 Addition\nTo add numbers in R, all you need to use the + operator. For example 2+2=4. When you type it in R you have:\n\n2+2\n\n[1] 4\n\n\nWhen you ask R to perform a task, it prints out the result of the task. As we can see above, R prints out the number 4.\nTo add more than 2 numbers, you can simply just type it in.\n\n2+2+2\n\n[1] 6\n\n\nThis provides the number 6.\n\n\n1.2.1.2 Subtraction\nTo subtract numbers, you need to use the - operator. Try 4-2:\n\n4-2\n\n[1] 2\n\n\nTry 4-6-4\n\n4-6-4\n\n[1] -6\n\n\nNotice that you get a negative number.\nNow try 4+4-2+8:\n\n4+4-2+8\n\n[1] 14\n\n\n\n\n1.2.1.3 Multiplication\nTo multiply numbers, you will need to use the * operator. Try 4*4:\n\n4*4\n\n[1] 16\n\n\n\n\n1.2.1.4 Division\nTo divide numbers, you can use the / operator. Try 9/3:\n\n9/3\n\n[1] 3\n\n\n\n\n1.2.1.5 Exponents\nTo exponentiate a number to the power of another number, you can use the ^ operator. Try 2^5:\n\n2^5\n\n[1] 32\n\n\nIf you want to take e to the power 2, you will use the exp() function. Try exp(2):\n\nexp(2)\n\n[1] 7.389056\n\n\n\n\n1.2.1.6 Roots\nTo take the n-th root of a value, use the ^ operator with the / operator to take the n-th root. For example, to take the 5th-root of 32, type 32^(1/5):\n\n32^(1/5)\n\n[1] 2\n\n\n\n\n1.2.1.7 Logarithms\nTo take the natural logarithm of a value, you will use the log() function. Try log(5):\n\nlog(5)\n\n[1] 1.609438\n\n\nIf you want to take the logarithm of a different base, you will use the log() function with base argument. We will discuss this more in section 7 of this chapter.\n\n\n\n1.2.2 Comparing Numbers\nAnother important part of R is comparing numbers. When you compare two numbers, R will tell you if that is true or false. We will talk about some of the basic comparisons and their operators.\n\n1.2.2.1 Less than/Greater than\nTo check if one number is less than or greater than another number, you will use the > or < operators. Try 5>4:\n\n5 > 4\n\n[1] TRUE\n\n\nNotice that R states it’s true. It evaluates the expression and tells you if it’s true or not. Try 5<4:\n\n5 < 4\n\n[1] FALSE\n\n\nNotice that R tells you it is false.\n\n\n1.2.2.2 Less than or equal to/Greater than or equal to\nTo check if one number is less than or equal to/greater than or equal to another number, you will use the >= or <= operators. Try 5>=5:\n\n5 >= 5\n\n[1] TRUE\n\n\nTry 5>=4:\n\n5 >= 4\n\n[1] TRUE\n\n\nTry 5<=4\n\n5 <= 4\n\n[1] FALSE\n\n\n\n\n1.2.2.3 Equals and Not Equals\nTo check if 2 numbers are equal to each other, you can use the == operator. Try 3==3:\n\n3 == 3\n\n[1] TRUE\n\n\nTry 4==3\n\n3 == 4\n\n[1] FALSE\n\n\nAnother way to see if 2 numbers are not equal to each other, you can use the !=. Try 3!=4:\n\n3 != 4\n\n[1] TRUE\n\n\nTry 3!=3:\n\n3 != 3\n\n[1] FALSE\n\n\nYou may be asking why use != instead of ==. They both provides similar results. Well the reason is that you may need the ‘TRUE’ output for analysis. One is only true when they are equal, while the other is true when they are not equal.\n\n\n\n1.2.3 Help\nThe last operator we will discuss is the help operator ?. If you want to know more about anything we talked about you can type ? in front of a functiona and a help page will pop-up in your browser or in RStudio’s ‘Help’ tab. For example you can type ?Arithmetic or ?Comparison, to review what we talked about. For other operators we didn’t talk about use ?assignOps and ?Logic."
  },
  {
    "objectID": "basics.html#types-of-data",
    "href": "basics.html#types-of-data",
    "title": "1  Basic R Programming",
    "section": "1.3 Types of Data",
    "text": "1.3 Types of Data\nIn R, the type of data, also known as class, that we are using dictates how the programming works. For the most part, users will use ‘numeric’,‘logical’, ‘POSIX’ and ‘character’ data types. Other types of data you may encounter are ‘integer’, ‘complex’, and ‘raw’. These types of data are rarely used. To obtain more information on them, use the ? operator.\n\n1.3.1 Numeric\nThe numeric class is the data that are numbers. Almost every analysis that you use will be based on the numeric class. To check if you have a numeric class, you just need to use the is.numeric() function. For example, try is.numeric(5):\n\nis.numeric(5)\n\n[1] TRUE\n\n\nNotice that when you input an number into R, it automatically changes it to a numeric class. R is changes data to the class that it most likely needs to be. Now this is great because you do not need to do anything on your end. Howerver, if you need a different class, you will need to change it.\n\n\n1.3.2 Logical\nA logical class are data where the only value is ‘TRUE’ or ‘FALSE’. Sometimes the data is coded as 1 for ‘TRUE’ and 0 for ‘FALSE’. The data may also be coded as ‘T’ or ‘F’. To check if data belongs in the logical class, you will need the is.logical() function. Try is.logical(3<4):\n\nis.logical(3 < 4)\n\n[1] TRUE\n\n\nRemember when we ran 3<4 in the previous section. The output was ‘TRUE’. Now R is checking whether the output is of a logical class. Since it it, R returns ‘TRUE’. Now try is.logical(3>4):\n\nis.logical(3 > 4)\n\n[1] TRUE\n\n\nThe output is ‘TRUE’ as well even though the condition 3>4 is ‘FALSE’. Since the output is a logical data type, it is a logical variable.\n\n\n1.3.3 POSIX\nThe POSIX class are date-time data. Where the data value is a time component. The POSIX class can be very complex in how it is formatted. IF you would like to learn more try ?POSIXct or ?POSIClt. First, lets run Sys.time() to check what is today’s data and time:\n\nSys.time()\n\n[1] \"2022-12-24 11:57:25 PST\"\n\n\nNow lets check if its of POSIX class, you can use the class() function to figure out which class is it. Try class(Sys.time()):\n\nclass(Sys.time())\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\n\n\n1.3.4 Character\nA character value is where the data values follow a string format. Examples of characters values are letters, words and even numbers. A character value is any value surrounded by quotation marks. For example, the phrase “Hello World!” is considered as one character value. Another example if you data is coded with the actual words “yes” or “no”. To check if you have character data, use the is.character() function. Try is.character(\"Hello World!\"):\n\nis.character(\"Hello World!\")\n\n[1] TRUE\n\n\nNotice that the output says ‘TRUE’. Character values can be created with single quotations. Try is.character('Hello World!'):\n\nis.character('Hello World!')\n\n[1] TRUE\n\n\n\n\n1.3.5 Integers\nIntegers are just whole numbers for the most part. To create an integer, type the letter ‘L’ after a number. To check if you are using integer data, use the is.integer() function. Try is.integer(5L):\n\nis.integer(5L)\n\n[1] TRUE\n\n\n\n\n1.3.6 Complex Numbers\nComplex numbers are data values where there is a real component and an imaginary component. The imaginary component is a number multiplied by \\(i=\\sqrt{-1}\\). To create a complect number, use the complex() function. To check if a number is complex, use the is.complex() function. Try the following to create a complex number complex(1,4,5):\n\ncomplex(1, 4, 5)\n\n[1] 4+5i\n\n\nNow try is.complex(complex(1,4,5)):\n\nis.complex(complex(1, 4, 5))\n\n[1] TRUE\n\n\n\n\n1.3.7 Raw\nYou will probably never use raw data. I have never used raw data in R. To create a raw value, use the raw() or charToRaw() functions. Try charToRaw('Hello World!'):\n\ncharToRaw('Hello World!')\n\n [1] 48 65 6c 6c 6f 20 57 6f 72 6c 64 21\n\n\nTo check if you have raw data, use the is.raw() function. Try is.raw(charToRaw('Hello World!')):\n\nis.raw(charToRaw('Hello World!'))\n\n[1] TRUE\n\n\n\n\n1.3.8 Missing\nThe last data class in R is missing data denoted as NA. Whenever you see NA in any of the analysis you see, it means that the data is missing. To check if you have missing data, use the is.na() function. Try is.na(NA):\n\nis.na(NA)\n\n[1] TRUE"
  },
  {
    "objectID": "basics.html#sec-r-objects",
    "href": "basics.html#sec-r-objects",
    "title": "1  Basic R Programming",
    "section": "1.4 R Objects",
    "text": "1.4 R Objects\nR objects are where most of the statistical analysis is conducted on. An R object can be thought of as a container of data. For the most part, you will only use a data frame (or tibble) for your data analysis. However, it is always a good idea to to have some basic understanding of the other R objects.\n\n1.4.1 Assigning objects\nTo create an R object, all we need to do is assign data to a variable. The variable is the name of the R object. it can be called anything, but you can only use alphanumeric values, underscore, and periods. To assign a value to a variable, use the <- operator. This is known a left assignment. Kinda like an arrow pointing left. Try assigning 9 to ‘x’ (x<-9)`:\n\nx <- 9\n\nTo see if x contains 9, type x in the console:\n\nx\n\n[1] 9\n\n\nNow x can be treated as data and we can perform data analysis on it. For example, try squaring it:\n\nx^2\n\n[1] 81\n\n\nYou can use any mathematical operation from the previous sections. Try some other operations and see what happens.\nThe output R prints out can be stored in a variable using the asign operator, <-. Try storing x^3 in a variable called x_cubed:\n\nx_cubed <- x^3\n\nTo see what is stored in x_cubed you can either type x_cubed in the console or use the print() function with ‘x_cubed’ inside the paranthesis.\n\nx_cubed\n\n[1] 729\n\nprint(x_cubed)\n\n[1] 729\n\n\n\n\n1.4.2 Vectors\nA vector is a set data values of a certain length. The R object x is considered as a numerical vector (because it contains a number) with the length 1. To check, try is.numeric(x) and is.vector(x):\n\nis.numeric(x)\n\n[1] TRUE\n\nis.vector(x)\n\n[1] TRUE\n\n\nNow let’s create a logical vector that contains 4 elements (have it follow this sequence: T,F,T,F) and assign it to y. To create a vector use the c() function and type all the values and seperating it with columns. Type y<-c(T,F,T,F):\n\ny <- c(T, F, T, F)\n\nNow, lets see how y looks like. Type y:\n\ny\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\nNow lets see if it’s a logical vector:\n\nis.logical(y)\n\n[1] TRUE\n\nis.vector(y)\n\n[1] TRUE\n\n\nFortunately, this vector is really small to count how many elements it has, but what if the vector is really large? To find out how many elements a vector has, use the length() function. Try length(y):\n\nlength(y)\n\n[1] 4\n\n\nThe c() function allows you to put any data type and as many values as you wish. The only condition of a vector is that it must be the same data type.\n\n\n1.4.3 Matrices\nA matrix can be thought as a square or rectangular grid of data values. This grid can be constructed in any shape. Similar to vectors they must contain the same data type. The size of a matrix is usually denoted as \\(n\\times k\\), where \\(n\\) represents the number of rows and \\(k\\) represents the number of columns. To get a rough idea of how a matrix may look like, type matrix(rep(1,12),nrow=4,ncol=3)1:\n\nmatrix(rep(1, 12), nrow = 4, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n[3,]    1    1    1\n[4,]    1    1    1\n\n\nNotice that this is a \\(4\\times 3\\) matrix. Each element in the matrix has the value 1. Now try this matrix(rbinom(12,1.5),nrow=4,ncol=3)2:\n\nmatrix(rbinom(12, 1, .5), nrow = 4, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    1\n[3,]    0    0    0\n[4,]    0    1    1\n\n\nYour matrix may look different, but that is to be expected. Notice that some elements in a matrix are 0’s and some are 1’s. Each element in a matrix can hold any value.\nConstructing a matrix can be a bit difficult to do because the data values may need to be arranged in a certain way. Notice that I used the matrix() function to create the matrix. The examples above contain other components in the function that we will discuss later.\n\n\n1.4.4 Arrays\nMatrices can be considered as a 2-dimensional block of numbers. An array is an n-dimensional block of numbers. While you may never need to use an array for data analysis. It may come in handy when programming by hand. To create an array, use the array() function. Below is an example of a \\(3 \\times 3 \\times 3\\) with the numbers 1, 2, and 3 representing the 3rd dimension stored in an R object called first_array3.\n\n(first_array <- array(c(rep(1, 9), rep(2, 9), rep(3, 9)),\n                      dim=c(3,3,3)))\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n[3,]    1    1    1\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    2    2    2\n[2,]    2    2    2\n[3,]    2    2    2\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]    3    3    3\n[2,]    3    3    3\n[3,]    3    3    3\n\n\n\n\n1.4.5 Data Frames\nData frames seems like a data set that you may encounter in an excel file. However, there are a couple of differences. First, each row represents an observation, and each column represents a characteristic of the observation. Additionally, each column in a data frame will be the same data type. To get an idea of what a data frame looks like, try head(iris):\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nThe head() function just tells R to only print the top few components of the data frame.\nNow try tail(iris):\n\ntail(iris)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\nThe tail() function provides the last 6 rows of the data frame.\n\n\n1.4.6 Lists\nTo me a list is just a container that you can store practically anything. It is compiled of elements, where each element contains an R object. For example, the first element of a list may contain a data frame, the second element may contain a vector, and the third element may contain another list. It is just a way to store things.\nTo create a list, use the list() function. Create a list compiled of first element with the mtcars data set, second element with a vector of zeros of size 4, and a matrix \\(3 \\times 3\\) identity matrix4. Store the list in an object called list_one:\n\nlist_one <- list(mtcars, rep(0, 4),\n                 diag(rep(1, 3)))\n\nType list_one to see what pops out:\n\nlist_one\n\n[[1]]\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n[[2]]\n[1] 0 0 0 0\n\n[[3]]\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\nEach element in the list is labeled as a number. It is more useful to have the elements named. An element is named by typing the name in quotes followed by the = symbol before your object in the list() function (mtcars=mtcars).\n\nlist_one <- list(mtcars = mtcars,\n                 vector = rep(0, 4),\n                 identity = diag(rep(1, 3)))\n\nHere I am creating an object called list_one, where the first element is mtcars labeled mtcars, the second element is a vector of zeros labeled vector and the last element is the identity matrix labeled identity.’\nNow create a new list called list_two and store list_one labeled as list_one and first_array labeled as array.\n\n(list_two <- list(list_one = list_one,\n                  array = first_array))\n\n$list_one\n$list_one$mtcars\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n$list_one$vector\n[1] 0 0 0 0\n\n$list_one$identity\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n$array\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n[3,]    1    1    1\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    2    2    2\n[2,]    2    2    2\n[3,]    2    2    2\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]    3    3    3\n[2,]    3    3    3\n[3,]    3    3    3"
  },
  {
    "objectID": "basics.html#r-packages",
    "href": "basics.html#r-packages",
    "title": "1  Basic R Programming",
    "section": "1.5 R Packages",
    "text": "1.5 R Packages\n\nplot(mtcars$mpg, mtcars$hp)\n  \n## Loading Packages\nlibrary(ggplot2)\n\n\n\nggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()\n\n\n\n## Installing Packages\n#install.packages(\"rmarkdown\")"
  },
  {
    "objectID": "control_flow.html#indexing",
    "href": "control_flow.html#indexing",
    "title": "2  Control Flow",
    "section": "2.1 Indexing",
    "text": "2.1 Indexing\nIn the Section 1.4, we discussed about different types of R objects. For example, a vector can be a certain data type with a set number of elements. Here we construct a vector called x increasing from -5 to 5 by one unit:\n\n(x <- -5:5)\n\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n\nThe vector x has 11 elements. If I want to know what the 6th element of x, I can index the 6th element from a vector. To do this, we use [] square brackets on x to index it. For example, we index the 6th element of x:\n\nx[6]\n\n[1] 0\n\n\nWhen ever we use [] next to an R object, it will print out the data to a specific value inside the square brackets. We can index an R object with multiple values:\n\nx[1:3]\n\n[1] -5 -4 -3\n\nx[c(3,9)]\n\n[1] -3  3\n\n\nNotice how the second line uses the c(). This is necessary when we want to specify non-contiguous elements. Now let’s see how we can index a matrix"
  },
  {
    "objectID": "control_flow.html#ifelse-statements",
    "href": "control_flow.html#ifelse-statements",
    "title": "2  Control Flow",
    "section": "2.2 If/Else Statements",
    "text": "2.2 If/Else Statements"
  },
  {
    "objectID": "control_flow.html#for-loops",
    "href": "control_flow.html#for-loops",
    "title": "2  Control Flow",
    "section": "2.3 for Loops",
    "text": "2.3 for Loops"
  },
  {
    "objectID": "control_flow.html#while-loops",
    "href": "control_flow.html#while-loops",
    "title": "2  Control Flow",
    "section": "2.4 while Loops",
    "text": "2.4 while Loops\n\n# Control Flow: if else statements\nx <- rnorm(1)\n\n## Logical Statements\n\nx > 0 \n\n[1] TRUE\n\n## if statements\n\nif (x > 0) {\n  print(\"Positive\")\n} \n\n[1] \"Positive\"\n\n## else statements\n\nif (x > 0){\n  print(\"Positive\")\n} else {\n  print(\"Non-Positive\")\n}\n\n[1] \"Positive\"\n\n## Example 2\ny <- rnorm(1)\n\n\nif (y > 0){\n  print(\"Positive\")\n  print(y)\n  mean(y)\n} else {\n  print(\"Non-Positive\")\n  print(y)\n  length(y)\n}\n\n[1] \"Positive\"\n[1] 1.014544\n\n\n[1] 1.014544\n\n\n\n# Control Flow: else if statements\n(x <- sample(-1:1,1))\n\n[1] 0\n\n## Logical Statements\n\nx > 0 \n\n[1] FALSE\n\n## if statements\n\nif (x > 0) {\n  print(\"Positive\")\n} \n\n## else if statements\n\nif (x > 0) {\n  print(\"Positive\")\n} else if (x < 0) {\n  print(\"Negative\")\n} else {\n  print(\"Zero\")\n}\n\n[1] \"Zero\"\n\n## Example 2\ny <- sample(-1:1,1)\n\n\nif (y > 0){\n  print(\"Positive\")\n} else if (y < 0) {\n  print(\"Negative\")\n} else {\n  print(\"Zero\")  \n}\n\n[1] \"Negative\"\n\n\n\n# Control Flow: break & next function -----\n\n## Function\nerr_fx <- function(x){\n  if (x>0){\n    return(x)\n  } else {\n    stop(\"x is not positive\")\n  }\n}\n\n(y <- rnorm(1))\n\n[1] 0.8879425\n\n# err_fx(y)\n\n## Loop Example\nx <- rnorm(100)\nloop <- c()\nfor (i in seq_along(x)) {\n  try_err <- try(err_fx(x[i]), silent = T)\n  if (inherits(try_err, \"try-error\")){\n    loop[i] <- 0\n  } else {\n    loop[i] <- try_err\n  }\n}\n\n\n## Break -----\nx <- rnorm(100)\nloop <- c()\nfor (i in seq_along(x)) {\n  try_err <- try(err_fx(x[i]), silent = T)\n  if (inherits(try_err, \"try-error\")){\n    break\n  } else {\n    loop[i] <- try_err\n  }\n}\n\n## Next -----\nx <- rnorm(100)\nloop <- c()\nfor (i in seq_along(x)) {\n  try_err <- try(err_fx(x[i]), silent = T)\n  if (inherits(try_err, \"try-error\")){\n    next\n  } else {\n    loop[i] <- try_err\n  }\n}\n\nx <- rnorm(100)\nloop <- c()\nfor (i in seq_along(x)) {\n  try_err <- try(err_fx(x[i]), silent = T)\n  if (inherits(try_err, \"try-error\")){\n    next\n  } else {\n    loop <- c(loop, try_err)\n  }\n}\n\n\n# Control Flow: try function -----\n\n## Function\nerr_fx <- function(x){\n  if (x>0){\n    return(x)\n  } else {\n    stop(\"x is not positive\")\n  }\n}\n\n## Example -----\n(y <- rnorm(1))\n\n[1] 0.3059463\n\n# err_fx(y)\n\n## try function ----\n\ny_err <- try(err_fx(y), silent = T)\n\n## Example ----\n# x <- rnorm(100)\n# loop <- c()\n# for (i in x){\n#   loop[i] <- err_fx(i)\n# }\n\n## Using try\nx <- rnorm(100)\nloop <- c()\nfor (i in seq_along(x)) {\n  try_err <- try(err_fx(x[i]), silent = T)\n  if (inherits(try_err, \"try-error\")){\n    loop[i] <- 0\n  } else {\n    loop[i] <- try_err\n  }\n}\n\n\n# Control Flow: Loops ----\n\n# Loops are used to conduct repetitive/iterative tasks\n# Each iteration conducts a task given a set of values\n# The values for each iteration change as the loop moves\n# from one iteration to another\n\n## for Anatomy -----\n\n# for (i in vector) {\n#   Perform Task\n# }\n\n## Printing Example ------\n\n### print number 1 through 5, separately\n\n# We want to do this:\nprint(1); print(2); print(3); print(4); print(5)\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\n[1] 4\n\n\n[1] 5\n\n# We don't want this:\nprint(1:5)\n\n[1] 1 2 3 4 5\n\n### Using a loop\nfor (i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n## Printing Letters -----\n### Print all the letters, seperately\nprint(letters)\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nfor (i in 1:26){\n  print(letters[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\"\n[1] \"f\"\n[1] \"g\"\n[1] \"h\"\n[1] \"i\"\n[1] \"j\"\n[1] \"k\"\n[1] \"l\"\n[1] \"m\"\n[1] \"n\"\n[1] \"o\"\n[1] \"p\"\n[1] \"q\"\n[1] \"r\"\n[1] \"s\"\n[1] \"t\"\n[1] \"u\"\n[1] \"v\"\n[1] \"w\"\n[1] \"x\"\n[1] \"y\"\n[1] \"z\"\n\n## cleaner\nfor (i in seq_along(letters)){\n  print(letters[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\"\n[1] \"f\"\n[1] \"g\"\n[1] \"h\"\n[1] \"i\"\n[1] \"j\"\n[1] \"k\"\n[1] \"l\"\n[1] \"m\"\n[1] \"n\"\n[1] \"o\"\n[1] \"p\"\n[1] \"q\"\n[1] \"r\"\n[1] \"s\"\n[1] \"t\"\n[1] \"u\"\n[1] \"v\"\n[1] \"w\"\n[1] \"x\"\n[1] \"y\"\n[1] \"z\"\n\n## cleanest\n\nfor (i in letters){\n  print(i)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\"\n[1] \"f\"\n[1] \"g\"\n[1] \"h\"\n[1] \"i\"\n[1] \"j\"\n[1] \"k\"\n[1] \"l\"\n[1] \"m\"\n[1] \"n\"\n[1] \"o\"\n[1] \"p\"\n[1] \"q\"\n[1] \"r\"\n[1] \"s\"\n[1] \"t\"\n[1] \"u\"\n[1] \"v\"\n[1] \"w\"\n[1] \"x\"\n[1] \"y\"\n[1] \"z\"\n\n\n\n# Control Flow: Nested Loops ----\nlibrary(greekLetters)\nletters_new <- letters[1:3]\ngreek_lower <- greek_vector[1:24]\n\npaste(letters_new[1], greek_lower[1], sep = \"\")\n\n[1] \"aα\"\n\npaste(letters_new[1], greek_lower[2], sep = \"\")\n\n[1] \"aβ\"\n\npaste(letters_new[2], greek_lower[1], sep = \"\")\n\n[1] \"bα\"\n\npaste(letters_new[2], greek_lower[2], sep = \"\")\n\n[1] \"bβ\"\n\npaste(letters_new[3], greek_lower[1], sep = \"\")\n\n[1] \"cα\"\n\npaste(letters_new[3], greek_lower[2], sep = \"\")\n\n[1] \"cβ\"\n\n## Inefficient way\nfor(i in greek_lower){\n  print(paste(letters_new[1], i, sep = \"\"))\n}\n\n[1] \"aα\"\n[1] \"aβ\"\n[1] \"aγ\"\n[1] \"aδ\"\n[1] \"aε\"\n[1] \"aζ\"\n[1] \"aη\"\n[1] \"aθ\"\n[1] \"aι\"\n[1] \"aκ\"\n[1] \"aλ\"\n[1] \"aμ\"\n[1] \"aν\"\n[1] \"aξ\"\n[1] \"aο\"\n[1] \"aπ\"\n[1] \"aρ\"\n[1] \"aσ\"\n[1] \"aτ\"\n[1] \"aυ\"\n[1] \"aφ\"\n[1] \"aχ\"\n[1] \"aψ\"\n[1] \"aω\"\n\nfor(i in greek_lower){\n  print(paste(letters_new[2], i, sep = \"\"))\n}\n\n[1] \"bα\"\n[1] \"bβ\"\n[1] \"bγ\"\n[1] \"bδ\"\n[1] \"bε\"\n[1] \"bζ\"\n[1] \"bη\"\n[1] \"bθ\"\n[1] \"bι\"\n[1] \"bκ\"\n[1] \"bλ\"\n[1] \"bμ\"\n[1] \"bν\"\n[1] \"bξ\"\n[1] \"bο\"\n[1] \"bπ\"\n[1] \"bρ\"\n[1] \"bσ\"\n[1] \"bτ\"\n[1] \"bυ\"\n[1] \"bφ\"\n[1] \"bχ\"\n[1] \"bψ\"\n[1] \"bω\"\n\nfor(i in greek_lower){\n  print(paste(letters_new[3], i, sep = \"\"))\n}\n\n[1] \"cα\"\n[1] \"cβ\"\n[1] \"cγ\"\n[1] \"cδ\"\n[1] \"cε\"\n[1] \"cζ\"\n[1] \"cη\"\n[1] \"cθ\"\n[1] \"cι\"\n[1] \"cκ\"\n[1] \"cλ\"\n[1] \"cμ\"\n[1] \"cν\"\n[1] \"cξ\"\n[1] \"cο\"\n[1] \"cπ\"\n[1] \"cρ\"\n[1] \"cσ\"\n[1] \"cτ\"\n[1] \"cυ\"\n[1] \"cφ\"\n[1] \"cχ\"\n[1] \"cψ\"\n[1] \"cω\"\n\nfor (i in 1:3){\n  for (ii in greek_lower){\n    print(paste(letters_new[i], ii, sep = \"\"))\n  }\n}\n\n[1] \"aα\"\n[1] \"aβ\"\n[1] \"aγ\"\n[1] \"aδ\"\n[1] \"aε\"\n[1] \"aζ\"\n[1] \"aη\"\n[1] \"aθ\"\n[1] \"aι\"\n[1] \"aκ\"\n[1] \"aλ\"\n[1] \"aμ\"\n[1] \"aν\"\n[1] \"aξ\"\n[1] \"aο\"\n[1] \"aπ\"\n[1] \"aρ\"\n[1] \"aσ\"\n[1] \"aτ\"\n[1] \"aυ\"\n[1] \"aφ\"\n[1] \"aχ\"\n[1] \"aψ\"\n[1] \"aω\"\n[1] \"bα\"\n[1] \"bβ\"\n[1] \"bγ\"\n[1] \"bδ\"\n[1] \"bε\"\n[1] \"bζ\"\n[1] \"bη\"\n[1] \"bθ\"\n[1] \"bι\"\n[1] \"bκ\"\n[1] \"bλ\"\n[1] \"bμ\"\n[1] \"bν\"\n[1] \"bξ\"\n[1] \"bο\"\n[1] \"bπ\"\n[1] \"bρ\"\n[1] \"bσ\"\n[1] \"bτ\"\n[1] \"bυ\"\n[1] \"bφ\"\n[1] \"bχ\"\n[1] \"bψ\"\n[1] \"bω\"\n[1] \"cα\"\n[1] \"cβ\"\n[1] \"cγ\"\n[1] \"cδ\"\n[1] \"cε\"\n[1] \"cζ\"\n[1] \"cη\"\n[1] \"cθ\"\n[1] \"cι\"\n[1] \"cκ\"\n[1] \"cλ\"\n[1] \"cμ\"\n[1] \"cν\"\n[1] \"cξ\"\n[1] \"cο\"\n[1] \"cπ\"\n[1] \"cρ\"\n[1] \"cσ\"\n[1] \"cτ\"\n[1] \"cυ\"\n[1] \"cφ\"\n[1] \"cχ\"\n[1] \"cψ\"\n[1] \"cω\"\n\nfor (i in letters_new){\n  for (ii in greek_lower){\n    print(paste(i, ii, sep = \"\"))\n  }\n}\n\n[1] \"aα\"\n[1] \"aβ\"\n[1] \"aγ\"\n[1] \"aδ\"\n[1] \"aε\"\n[1] \"aζ\"\n[1] \"aη\"\n[1] \"aθ\"\n[1] \"aι\"\n[1] \"aκ\"\n[1] \"aλ\"\n[1] \"aμ\"\n[1] \"aν\"\n[1] \"aξ\"\n[1] \"aο\"\n[1] \"aπ\"\n[1] \"aρ\"\n[1] \"aσ\"\n[1] \"aτ\"\n[1] \"aυ\"\n[1] \"aφ\"\n[1] \"aχ\"\n[1] \"aψ\"\n[1] \"aω\"\n[1] \"bα\"\n[1] \"bβ\"\n[1] \"bγ\"\n[1] \"bδ\"\n[1] \"bε\"\n[1] \"bζ\"\n[1] \"bη\"\n[1] \"bθ\"\n[1] \"bι\"\n[1] \"bκ\"\n[1] \"bλ\"\n[1] \"bμ\"\n[1] \"bν\"\n[1] \"bξ\"\n[1] \"bο\"\n[1] \"bπ\"\n[1] \"bρ\"\n[1] \"bσ\"\n[1] \"bτ\"\n[1] \"bυ\"\n[1] \"bφ\"\n[1] \"bχ\"\n[1] \"bψ\"\n[1] \"bω\"\n[1] \"cα\"\n[1] \"cβ\"\n[1] \"cγ\"\n[1] \"cδ\"\n[1] \"cε\"\n[1] \"cζ\"\n[1] \"cη\"\n[1] \"cθ\"\n[1] \"cι\"\n[1] \"cκ\"\n[1] \"cλ\"\n[1] \"cμ\"\n[1] \"cν\"\n[1] \"cξ\"\n[1] \"cο\"\n[1] \"cπ\"\n[1] \"cρ\"\n[1] \"cσ\"\n[1] \"cτ\"\n[1] \"cυ\"\n[1] \"cφ\"\n[1] \"cχ\"\n[1] \"cψ\"\n[1] \"cω\"\n\n# for (i in vector) {\n#   for (ii in vector) {\n#     for (iii in vector) {\n#       for (iiii in vector) {\n#         \n#       }\n#     }\n#   }\n# }\n\n\n# Control Flow: Loops ----\n\n# for (i in vector) {\n#   Perform Task\n# }\n\n## Vector construction -----\n# x²\n### Method 1\nx <- rnorm(1000)\nx^2\n\n   [1] 3.081271e-02 7.852409e-01 7.807286e-01 5.331849e-01 9.986230e-01\n   [6] 5.099955e+00 2.366583e-01 2.861117e-01 1.415572e+00 3.307023e-01\n  [11] 1.311356e+00 4.615945e+00 5.566030e+00 2.921744e+00 3.299822e-02\n  [16] 8.898654e-02 7.258781e+00 8.458761e-03 1.704258e+00 6.065342e-01\n  [21] 1.775966e+00 2.544684e+00 1.492175e-01 6.653784e-01 4.267409e-01\n  [26] 4.850564e-02 3.570281e-02 1.392309e-02 1.820077e-02 1.461694e+00\n  [31] 2.987820e+00 1.689816e+00 2.789136e-02 6.846400e+00 4.448150e-01\n  [36] 1.995381e+00 2.029127e-01 6.710296e-01 1.361124e-01 1.783591e-01\n  [41] 2.024076e-01 2.740001e-01 3.689032e-02 1.446450e-01 8.337474e-01\n  [46] 1.327989e+00 2.774648e+00 6.464905e-01 4.437928e-01 1.963726e-01\n  [51] 2.201569e-01 1.721687e-01 1.065966e-01 2.074419e-02 2.226825e-03\n  [56] 1.138909e+00 5.459723e+00 4.639354e+00 1.242304e-02 1.029522e-01\n  [61] 6.950292e-01 2.007708e-01 4.079324e-02 1.088152e-01 1.286337e+00\n  [66] 1.054886e+00 3.669819e-03 2.474606e+00 2.111423e+00 7.198032e-02\n  [71] 9.781214e-02 4.372793e-01 1.496202e-01 5.968772e-01 7.406153e-01\n  [76] 1.507325e-01 3.599983e-01 3.158563e-01 2.264786e+00 9.418733e-03\n  [81] 2.888541e-01 2.898731e-01 1.355826e-01 5.437888e-01 5.432920e+00\n  [86] 1.408915e-03 2.445928e-02 4.394266e-02 3.383756e+00 4.726072e-02\n  [91] 3.201549e-01 8.023642e-01 6.169614e-01 4.255414e-01 2.775994e+00\n  [96] 6.973062e-01 4.417732e-03 2.734434e+00 2.092164e+00 8.977202e-01\n [101] 6.272606e+00 3.243169e-01 1.762872e-01 1.677064e+00 1.839579e-01\n [106] 3.113628e-01 6.339120e-02 2.188547e-01 9.287012e-02 1.943298e+00\n [111] 2.698823e+00 4.635429e-02 3.505310e-01 3.024035e+00 2.900496e-01\n [116] 7.085155e-01 1.468109e-01 4.344058e-01 5.081703e+00 1.136691e-01\n [121] 2.718141e+00 5.642092e-02 9.503502e-01 3.780742e-01 4.112193e-02\n [126] 5.277583e-01 1.207071e+00 1.003145e+00 4.331489e+00 3.551029e-02\n [131] 1.557357e+00 1.689854e+00 4.878891e-01 1.446009e-01 3.316580e-01\n [136] 2.453363e+00 6.495640e-01 2.539028e+00 7.117644e-02 2.053733e-01\n [141] 2.353675e+00 6.923206e-03 1.655920e+00 3.543936e-01 3.211627e-01\n [146] 3.930486e-01 1.621570e-02 1.891343e+00 1.599912e-03 2.131704e-02\n [151] 1.713119e+00 8.237122e-01 4.039887e-02 7.293822e+00 2.930712e+00\n [156] 5.386159e-01 3.390841e+00 7.157953e-02 3.859446e-01 6.026515e-01\n [161] 1.967554e+00 5.467676e-01 1.039360e+00 2.137658e+00 9.980061e-01\n [166] 3.222937e-01 2.526221e-01 5.568376e-01 1.669915e-04 1.440672e-01\n [171] 2.606581e-01 8.223535e-01 5.025454e-02 3.152434e-02 9.879922e-01\n [176] 1.172281e-01 1.438007e+00 4.681169e-01 7.799759e-04 1.194786e+00\n [181] 3.119907e+00 2.118490e-02 7.151454e-01 1.069589e+00 1.721663e+00\n [186] 4.305330e-01 4.247493e+00 1.418984e-01 2.791912e+00 2.484224e+00\n [191] 2.519761e+00 3.787890e-01 1.106698e-01 2.790626e+00 4.748615e-01\n [196] 2.074579e-01 8.880697e-01 1.515830e+00 1.112584e-01 5.236389e-02\n [201] 9.279602e-01 2.673671e-03 3.460077e-01 3.673007e-01 2.396937e+00\n [206] 7.367952e-01 1.663697e+00 1.108063e-01 1.395674e+00 1.461150e-01\n [211] 2.573090e+00 6.111128e-01 2.134665e+00 1.437993e+00 1.048586e-03\n [216] 9.433488e-02 6.459960e-01 3.954297e-01 1.673921e-01 2.151850e+00\n [221] 4.614266e-02 9.454885e-01 2.044795e+00 4.780623e+00 4.655331e+00\n [226] 1.062652e+00 1.438927e-03 9.933300e-01 9.934388e+00 2.334569e-01\n [231] 2.063846e-01 1.084382e-02 2.966086e+00 1.557598e-01 7.744626e-01\n [236] 6.204495e-01 1.097686e+00 3.793386e-01 6.987169e-01 7.716364e-01\n [241] 1.109641e+00 6.868829e-01 6.814646e-02 2.504204e-02 5.501809e-04\n [246] 4.968627e-01 8.831288e-01 2.205479e-01 1.325513e-02 8.725190e-02\n [251] 1.467793e-01 1.955862e+00 9.431400e-02 4.864946e-01 2.433286e-02\n [256] 4.495024e-01 2.121027e-02 3.183752e+00 5.896404e-01 1.240175e-01\n [261] 1.016898e-01 1.057278e+00 1.179922e-01 8.711752e-03 1.842029e+00\n [266] 4.055771e-01 1.590299e+00 2.406358e+00 1.841162e-01 3.816424e-01\n [271] 1.884190e+00 1.416407e+00 2.652501e+00 1.381185e+00 6.746944e-01\n [276] 9.106648e-03 3.050615e-01 1.387575e-02 4.044182e+00 1.355193e-01\n [281] 1.395234e-01 1.496764e+00 4.259887e+00 3.046950e+00 3.502197e-01\n [286] 2.850607e-01 5.081048e-01 1.502924e+00 1.138828e+00 9.190925e-02\n [291] 3.960058e-01 1.834441e-02 6.238820e-01 5.529155e-02 2.411003e-01\n [296] 6.434452e-03 7.212633e-01 5.245893e-02 3.371910e+00 8.549833e-02\n [301] 7.223673e-03 4.973788e-02 4.109624e-01 2.422007e-01 2.388658e+00\n [306] 4.412615e-01 8.632192e-02 3.447869e-01 2.128483e-01 1.591158e-03\n [311] 1.167046e-01 4.470537e-01 1.076001e+00 5.833804e-01 1.964198e+00\n [316] 1.349578e+00 1.884437e+00 2.723093e-02 4.119722e+00 3.483171e-01\n [321] 1.989522e-01 1.778306e-01 2.598106e-01 9.550615e-01 8.555244e-01\n [326] 4.052574e-01 3.979896e-02 3.544368e+00 2.363023e-03 2.044641e-01\n [331] 8.723983e-04 1.077157e-01 1.699866e-04 1.041590e-01 7.719609e-01\n [336] 8.743637e-02 4.700173e+00 8.551369e-02 2.899409e+00 2.865993e+00\n [341] 1.417456e-02 1.355814e-01 3.224688e-01 3.512402e-01 6.711437e-01\n [346] 3.079984e+00 4.279616e-01 5.095826e-01 3.392772e-01 6.263500e-03\n [351] 1.886280e-01 5.512974e-02 3.411939e-03 7.097455e-03 3.874706e+00\n [356] 2.728694e-01 5.694339e-02 2.203310e-02 3.731267e-02 1.373425e+00\n [361] 9.761214e-01 1.663768e-04 1.872671e-03 3.627967e-01 3.760863e-01\n [366] 8.474567e-01 1.262276e+00 3.665930e+00 9.056816e-01 2.161780e-01\n [371] 1.934660e+00 7.374140e-02 2.842584e-01 2.872317e-01 1.029066e-03\n [376] 5.617514e-01 1.164677e+00 3.939006e-01 1.903077e+00 4.043900e+00\n [381] 2.150028e-01 8.257069e-02 5.559865e-02 1.781379e+00 9.899316e-01\n [386] 3.691915e+00 2.475068e-01 2.535055e-02 9.072017e-01 4.277896e-01\n [391] 9.079419e-01 5.825094e-02 3.300005e+00 6.941748e-01 1.110677e-01\n [396] 1.048452e+00 2.605856e-01 1.016837e+00 6.723291e-01 1.217588e-01\n [401] 1.535251e-01 1.101174e+00 4.890642e-02 9.350761e-01 8.087293e-03\n [406] 2.007933e-02 2.262291e+00 1.040149e-01 2.277044e+00 2.932701e-01\n [411] 9.498776e-04 1.388223e+00 1.311185e+00 1.002576e-01 1.683532e-01\n [416] 3.007669e-01 1.528183e+00 2.787585e-02 7.516262e-02 1.186984e-01\n [421] 6.465260e+00 3.589527e+00 6.868079e-01 3.591754e-01 5.481121e-04\n [426] 2.525909e-02 4.135935e-01 4.817801e-01 2.274519e-05 1.102510e+00\n [431] 4.696064e+00 2.447214e+00 2.643579e+00 1.687692e-01 9.177333e-01\n [436] 7.317094e-01 1.675716e-01 2.992148e-01 2.189426e+00 3.892586e-01\n [441] 4.941274e+00 2.159911e+00 2.482270e+00 2.342012e+00 1.009942e-01\n [446] 6.090322e-01 7.586208e-02 1.711627e+00 2.678234e+00 5.256402e-01\n [451] 3.799019e-01 1.762783e-03 4.773004e+00 2.467801e-01 3.385707e-02\n [456] 2.154719e-01 8.303770e-01 1.927015e-04 1.053547e-01 2.055546e-03\n [461] 6.598966e-01 2.223328e-01 6.119091e+00 2.171581e+00 4.550101e+00\n [466] 6.614278e-02 5.123808e-02 9.136966e-02 7.893066e-02 5.474003e-01\n [471] 1.295788e+00 2.425034e+00 5.572771e-02 9.199938e-04 2.260426e-01\n [476] 4.776338e-01 9.877438e-01 2.775233e+00 1.003774e-01 7.418138e-01\n [481] 1.039368e-01 1.418627e+00 2.571375e+00 1.019091e+00 5.310765e-03\n [486] 3.952385e-02 1.520727e-02 7.944500e-01 1.741457e-03 3.387164e-01\n [491] 2.406810e+00 1.239750e-01 2.436355e+00 1.273858e+00 5.007034e-02\n [496] 3.471172e-05 3.806404e-01 3.149982e-01 2.726251e-01 1.196085e-01\n [501] 4.608633e-01 4.427075e-03 6.721872e-03 7.936475e-01 3.985280e-01\n [506] 1.711200e+00 4.016874e-01 1.438840e+00 2.962841e+00 5.339493e-01\n [511] 1.135409e-01 4.701890e-02 3.587576e-01 7.364952e-01 3.771974e-02\n [516] 1.415854e-01 1.937278e-02 2.179571e+00 1.662911e-01 2.791914e-01\n [521] 3.465522e+00 1.646009e+00 5.899565e-01 7.159613e-03 2.114607e+00\n [526] 6.516186e+00 8.899172e-01 3.436604e-01 6.425216e-01 5.749549e+00\n [531] 3.925423e-04 1.429139e-01 9.065116e-01 4.609053e-01 2.317462e-01\n [536] 2.542418e-01 4.095660e-03 2.623870e-02 3.867086e+00 3.063438e-02\n [541] 1.494970e-01 2.996366e+00 1.123175e-02 1.122991e+00 1.046930e-02\n [546] 4.055120e-03 2.481783e-01 5.783606e-01 4.498424e-02 8.413103e-01\n [551] 1.009059e+00 1.616248e-02 4.242114e+00 4.974425e-01 1.006781e-02\n [556] 9.420373e-01 3.565819e-02 1.157644e+00 1.801874e+00 5.452189e+00\n [561] 8.951470e-05 1.269531e-01 1.514917e-02 2.548943e-01 3.690863e-06\n [566] 8.684232e-02 6.987037e-01 1.826818e+00 6.740141e-01 4.696888e-02\n [571] 1.409043e+00 1.438127e-01 7.113172e-01 9.418099e-01 3.784345e-01\n [576] 4.372590e-02 3.983257e-01 5.666680e-01 9.572660e+00 8.917179e-01\n [581] 3.336823e+00 2.783166e-02 2.303859e+00 3.836052e-02 5.449978e-01\n [586] 1.567444e-03 5.870721e+00 4.452568e-02 1.032991e-02 9.606569e-01\n [591] 3.106516e+00 1.451710e-01 1.187642e+00 1.573137e-01 4.956893e+00\n [596] 2.387835e-02 5.731646e-01 2.094511e-01 3.554479e-02 1.225249e-01\n [601] 1.733654e-01 4.635765e+00 2.054883e-01 6.382068e-01 2.534186e-01\n [606] 4.292986e-01 7.680731e-01 2.510634e-01 1.630255e+00 2.092600e-02\n [611] 1.866412e+00 3.000503e+00 1.639901e-01 8.823970e-01 2.869421e+00\n [616] 3.611562e+00 3.633922e-01 1.366189e+00 1.088818e+00 1.042542e+00\n [621] 2.874716e-01 9.182450e-02 1.530142e+00 1.952860e-01 1.177631e-02\n [626] 5.788943e-01 6.917988e-01 7.201398e-01 6.257432e-02 2.898691e-02\n [631] 2.097983e-01 1.900270e-01 4.295422e-01 1.878286e-01 5.611169e-04\n [636] 6.018980e-01 1.676213e+00 8.755349e-01 3.396447e-03 1.559919e+00\n [641] 6.084081e-01 1.228027e+00 1.804636e-03 1.860729e+00 5.350228e-01\n [646] 2.055539e-01 6.869839e-01 1.398992e-02 2.631706e-01 3.477213e-01\n [651] 1.086137e+00 5.551726e-01 2.198365e+00 1.682980e+00 3.491341e+00\n [656] 7.853377e-01 4.682078e-03 2.761641e+00 6.253299e-01 5.323224e+00\n [661] 1.641831e+00 3.656660e+00 9.743151e-01 8.032501e-01 2.170662e-01\n [666] 5.350920e-02 1.765655e+00 4.625747e-02 4.962394e-01 1.540608e-01\n [671] 7.020565e+00 1.603574e-01 3.683972e+00 2.210569e+00 5.372802e-01\n [676] 2.862291e+00 8.598849e-01 2.500083e+00 3.184037e-01 1.397390e+00\n [681] 6.604656e-01 1.043954e-02 1.321560e-01 3.408266e-02 1.546225e-02\n [686] 1.927171e+00 3.790270e+00 5.908780e-01 3.133656e+00 1.769509e+00\n [691] 1.516540e-01 1.295200e+00 5.206075e-01 3.922376e-03 6.549603e+00\n [696] 7.902682e-01 1.292561e+00 1.153534e+00 1.465116e-01 9.145478e-01\n [701] 5.175625e-02 2.180919e+00 4.231419e-01 1.430387e-01 4.337522e-02\n [706] 2.625090e-01 6.964642e-04 1.907034e-02 6.048582e-03 1.069783e+00\n [711] 5.584268e-02 2.173828e+00 1.278472e+00 1.842220e+00 7.337323e-02\n [716] 5.618306e-02 9.148383e-04 1.618029e-01 6.448308e-03 1.114948e-01\n [721] 9.749556e-01 2.998670e+00 6.246234e-02 1.259430e+00 1.274859e+00\n [726] 3.552941e-04 8.079232e-01 1.843727e-01 1.335704e-01 3.176790e-02\n [731] 5.051872e-01 1.635309e-02 4.295376e-01 7.091771e-01 4.766324e-02\n [736] 1.837689e+00 1.102819e+00 6.136018e-02 1.202515e+00 1.341040e+00\n [741] 1.195468e+00 1.169159e+00 5.467576e-01 1.296572e-01 1.994002e-01\n [746] 3.677787e-03 4.557479e-02 6.635989e-01 3.569631e-01 1.867310e-02\n [751] 2.364235e-03 2.136993e-02 9.849509e-01 9.206502e-01 5.280011e-01\n [756] 8.733035e-01 1.098525e+00 9.761952e-01 1.397675e-01 8.329417e-03\n [761] 7.222615e-01 2.514599e-01 1.374938e-01 2.244226e-02 1.852070e+00\n [766] 1.385411e+00 5.420663e-02 7.820786e-01 9.854096e-02 6.200762e+00\n [771] 9.287942e-01 1.633341e-03 1.219971e+00 2.110442e-03 4.058929e-01\n [776] 3.844867e-01 5.723215e-01 3.184670e+00 3.477563e-02 8.527182e-01\n [781] 8.276670e-01 2.575307e+00 1.655490e-02 8.382352e-01 1.627626e-02\n [786] 3.845376e-04 1.620929e+00 1.172091e+00 1.031072e+00 3.412958e-01\n [791] 2.190421e-01 5.757527e+00 1.207975e-01 1.295812e-01 8.892511e-01\n [796] 1.413371e-01 5.242572e-01 1.062302e-02 9.931570e-01 4.968059e-01\n [801] 2.720278e+00 4.115427e-01 5.412889e+00 2.311334e+00 8.857773e-01\n [806] 2.435143e+00 2.145141e+00 3.726846e-02 5.086212e-02 5.050360e-01\n [811] 1.836699e-01 5.740955e-02 1.705978e-02 4.714295e+00 9.945341e-02\n [816] 3.498671e-02 1.983007e-02 8.469432e-02 3.270166e-01 1.882508e-01\n [821] 7.776702e-01 1.539975e+00 1.197788e+00 4.262228e-01 4.684081e+00\n [826] 1.010754e+00 2.029740e-02 6.150118e+00 2.774064e-02 2.327039e+00\n [831] 1.458885e+00 1.202400e+00 1.242591e+00 4.781261e-03 8.786374e-01\n [836] 7.571077e-02 1.340810e+00 6.674546e-01 5.552685e-02 8.517970e-01\n [841] 1.499056e-01 7.487790e+00 1.147826e-01 1.692925e+00 6.413788e-01\n [846] 7.034670e-01 1.631973e-02 3.438974e-01 1.695894e-01 1.654803e-01\n [851] 1.834810e+00 9.022618e-02 4.652254e+00 2.095462e-01 7.242968e-01\n [856] 1.141940e-01 5.759595e-01 3.184473e+00 6.750583e-03 1.843822e-01\n [861] 2.909402e-01 1.734374e+00 6.591171e-04 2.264208e-01 3.462481e-02\n [866] 2.154392e-01 1.393716e-05 2.088672e-01 2.740003e+00 9.881850e-01\n [871] 1.091010e+00 9.419910e-05 9.859461e-01 2.578647e-03 3.239333e-01\n [876] 1.330537e+00 3.923766e+00 1.023128e-01 3.147132e-01 3.639564e-01\n [881] 1.306052e-02 1.076994e+00 1.542745e+00 2.357803e-01 7.012826e-01\n [886] 2.882582e+00 1.161586e-02 1.123729e+00 3.417992e+00 1.371912e-02\n [891] 8.603852e+00 4.389268e-02 2.668370e-03 4.766744e-01 2.682331e+00\n [896] 1.068235e-02 3.281149e-01 2.266934e+00 1.634638e-02 2.571344e-01\n [901] 2.691081e+00 1.205609e-01 1.532806e+00 1.661480e+00 6.465652e-01\n [906] 2.321690e-01 5.559601e-01 4.099294e-01 4.807138e-01 9.556777e-02\n [911] 3.474274e-01 4.940166e-03 3.219596e+00 2.309995e+00 8.628477e-02\n [916] 7.424988e-01 2.329633e-01 3.620719e-01 1.507023e-01 1.972622e+00\n [921] 2.600108e-01 1.141482e+00 8.152736e-04 1.371862e-01 2.285117e-01\n [926] 5.274257e-02 9.229932e-02 8.643331e-02 1.215218e-02 1.120522e-01\n [931] 1.050132e+00 5.981591e-01 3.098785e+00 4.097970e-01 2.806694e+00\n [936] 9.611097e-01 1.092631e-01 2.371542e-01 6.778783e-01 5.236584e-02\n [941] 9.167157e+00 2.303630e-02 1.382590e+00 2.739071e+00 4.198961e-02\n [946] 9.341837e-01 1.800440e+00 1.081120e+00 2.295050e-01 5.194973e-02\n [951] 7.072283e-02 2.096045e+00 1.631108e-01 6.401985e-01 5.781088e-02\n [956] 3.266611e-01 2.423948e+00 1.948267e+00 2.679293e-02 7.822506e-01\n [961] 2.843613e+00 2.186793e-01 2.412303e-01 7.445291e-03 1.049139e+00\n [966] 1.024707e-01 4.518770e-02 8.395820e-01 7.101616e-03 3.013769e-01\n [971] 3.876085e-01 3.622876e-01 9.116784e-01 5.291860e+00 3.628216e-01\n [976] 9.683712e-01 6.516347e-01 2.976261e-05 1.779949e-01 5.307836e-01\n [981] 9.992920e-03 1.285837e-02 2.144028e+00 1.503184e-01 2.545077e-01\n [986] 1.478335e+00 4.176605e-03 1.204205e+00 1.106819e+00 5.632090e+00\n [991] 1.166985e-01 2.052634e+00 5.463298e-01 1.579301e+00 1.087560e-02\n [996] 1.194615e-03 1.084753e+00 1.696307e-01 7.683294e-01 1.184152e-04\n\noutput <- c()\nfor (i in seq_along(x)){\n  output <- c(output, x[i]^2)\n}\n\n### Method 2\nx <- rnorm(1000)\noutput <- c()\nfor (i in seq_along(x)){\n  output[i] <- x[i]^2\n}\n\n### Method 3\nx <- rnorm(1000)\noutput <- vector(length = length(x))\nfor (i in seq_along(x)){\n  output[i] <- x[i]^2\n}\n\n\n# Control Flow: While Loops -----\nx <- -5:5\nplot(x, exp(x), type = \"l\")\n\n\n\n## Asymptotic -----\nabs(exp(-14)-exp(-13))\n\n[1] 1.428801e-06\n\n## while statements -----\n# while (condition) {\n#   \n# }\n\n\n## while loops ----\nx <- 1\ndiff <- 1\nwhile (diff > 1e-20) {\n  old_x <- x\n  x <- x - 1\n  diff <- abs(exp(x) - exp(old_x))\n}\nprint(x)\n\n[1] -47\n\nprint(diff)\n\n[1] 6.65662e-21\n\n\n\n# Control Flow: Infinite While Loops -----\n(y <- rnorm(1))\n\n[1] 1.374294\n\nz <- as.integer(2)\n\n# logical operator &\nis.integer(z) & z > 0\n\n[1] TRUE\n\nis.integer(y) & y > 0\n\n[1] FALSE\n\nx <- -50:50\nplot(x, sin(x), type = \"l\")\n\n\n\n## Asymptotic -----\nabs(exp(13)-exp(12))\n\n[1] 279658.6\n\n## inf while loops ----\nx <- 1\ndiff <- 1\n# while (diff > 1e-20) {\n#   old_x <- x\n#   x <- x + 1\n#   diff <- abs(exp(x) - exp(old_x))\n# }\nprint(x)\n\n[1] 1\n\nprint(diff)\n\n[1] 1\n\n# x <- 1\n# diff <- 1\n# while (diff > 1e-20) {\n#   old_x <- x\n#   x <- x + 1\n#   diff <- abs(sin(x) - sin(old_x))\n# }\n# print(x)\n# print(diff)\n\n\n\n\n## while loops ----\nx <- 1\ncounter <- 0\ndiff <- 1\nwhile (diff > 1e-20 & counter < 30) {\n  old_x <- x\n  x <- x + 1\n  diff <- abs(exp(x) - exp(old_x))\n  counter <- counter + 1\n}\nprint(x)\n\n[1] 31\n\nprint(diff)\n\n[1] 1.836238e+13\n\nprint(counter)\n\n[1] 30\n\nx <- 1\ncounter <- 0\ndiff <- 1\nwhile (diff > 1e-20 & counter < 10^3) {\n  old_x <- x\n  x <- x + 1\n  diff <- abs(sin(x) - sin(old_x))\n  counter <- counter + 1\n}\nprint(x)\n\n[1] 1001\n\nprint(diff)\n\n[1] 0.09311106\n\nprint(counter)\n\n[1] 1000"
  },
  {
    "objectID": "functional.html#functions",
    "href": "functional.html#functions",
    "title": "3  Functional Programming",
    "section": "3.1 Functions",
    "text": "3.1 Functions"
  },
  {
    "objectID": "functional.html#apply-functions",
    "href": "functional.html#apply-functions",
    "title": "3  Functional Programming",
    "section": "3.2 *apply Functions",
    "text": "3.2 *apply Functions"
  },
  {
    "objectID": "importing.html",
    "href": "importing.html",
    "title": "5  Importing Data",
    "section": "",
    "text": "# Reading Data -----\n\n## RData ----\nload(\"~/x.RData\")\n\n## CSV ----\nlibrary(readr)\ndata_3_1_csv <- read_csv(\"student/stat_147/data/data_3_1.csv\")\nView(data_3_1_csv)\n\n## Excel ----\nlibrary(readxl)\ndata_3_1 <- read_excel(\"student/stat_147/data/data_3_1.xlsx\")\nView(data_3_1)\n\n## txt ----\nlibrary(readr)\ndata_3_1_s <- read_table2(\"student/stat_147/data/data_3_1_s.txt\")\nView(data_3_1_s)\n\n## Semi-colon ----\nlibrary(readr)\ndata_3_1_sc <- read_delim(\"student/stat_147/data/data_3_1_sc.txt\", \";\", escape_double = FALSE, trim_ws = TRUE)\nView(data_3_1_sc)\n## SPSS ----\nlibrary(haven)\ndata_3_1 <- read_sav(\"student/stat_147/data/data_3_1.sav\")\nView(data_3_1)\n\n## SAS -----\nlibrary(haven)\ndata_3_1 <- read_sas(\"student/stat_147/data/data_3_1.sas7bdat\", NULL)\nView(data_3_1)\n\n## Stata ----\nlibrary(haven)\ndata_3_1 <- read_dta(\"student/stat_147/data/data_3_1.dta\")\nView(data_3_1)\n\ndata_3_1 <- read.csv(\"~/student/stat_147/data/data_3_1.csv\", header=FALSE)\nView(data_3_1)\n\n\n# Reading Data -----\nsetwd(\"~/Repos/s147/files/Week_2\")\n\n## Base R -----\n\n# CSV\ndata.csv <- read.csv(\"data.csv\")\n\n# STATA File\nlibrary(foreign)\nread.dta(\"data.dta\")\n\n## RStudio packages\nlibrary(readr)\nread_csv(\"data.csv\")\n\nlibrary(readxl)\nread_excel(\"data.xlsx\")\n\nlibrary(haven)\nread_dta(\"data.dta\")"
  },
  {
    "objectID": "data_summary.html#descriptive-statistics",
    "href": "data_summary.html#descriptive-statistics",
    "title": "7  Data Summarization",
    "section": "7.1 Descriptive Statistics",
    "text": "7.1 Descriptive Statistics\nHere, we will go over some of the basic syntax to obtain basic statistics. We will use the variables mpg and cyl from the mtcars data set. To view the data set use the head():\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nThe variable mpg would be used as a continuous variable, and the variable cyl would be used as a categorical variable.\n\n7.1.1 Point Estimates\nThe first basic statistic you can compute are point estimates. These are your means, medians, etc. Here we will calculate these estimates.\n\n7.1.1.1 Mean\nTo obtain the mean, use the mean(), you only need to specify x= for the data to compute the mean:\n\nmean(mtcars$mpg)\n\n[1] 20.09062\n\n\n\n\n7.1.1.2 Median\nTo obtain the median, use the median(), you only need to specify x= for the data to compute the median:\n\nmedian(mtcars$mpg)\n\n[1] 19.2\n\n\n\n\n7.1.1.3 Frequency\nTo obtain a frequency table, use the table(), you only need to specify the data as the first argument to compute the frequency table:\n\ntable(mtcars$cyl)\n\n\n 4  6  8 \n11  7 14 \n\n\n\n\n7.1.1.4 Proportion\nTo obtain a the proportions for the frequency table, use the prop.table(). However the first argument must be the results from the table(). Use the table() inside the prop.table() to get the proportions:\n\nprop.table(table(mtcars$cyl))\n\n\n      4       6       8 \n0.34375 0.21875 0.43750 \n\n\n\n\n\n7.1.2 Variability\nIn addition to point estimates, variability is an important statistic to report to let a user know about the spread of the data. Here we will calculate certain variability statistics.\n\n7.1.2.1 Variance\nTo obtain the variance, use the var(), you only need to specify x= for the data to compute the variance:\n\nvar(mtcars$mpg)\n\n[1] 36.3241\n\n\n\n\n7.1.2.2 Standard deviation\nTo obtain the standard deviation, use the sd(), you only need to specify x= for the data to compute the standard deviation:\n\nsd(mtcars$mpg)\n\n[1] 6.026948\n\n\n\n\n7.1.2.3 Max and Min\nTo obtain the max and min, use the max() and min(), respectively. You only need to specify the data as the first argument to compute the max and min:\n\nmax(mtcars$mpg)\n\n[1] 33.9\n\nmin(mtcars$mpg)\n\n[1] 10.4\n\n\n\n\n7.1.2.4 Q1 and Q3\nTo obtain the Q1 and Q3, use the quantile() and specify the desired quantile with probs=. You only need to specify the data as the first argument and probs= (as a decimal) to compute the Q1 and Q3:\n\nquantile(mtcars$mpg, .25)\n\n   25% \n15.425 \n\nquantile(mtcars$mpg, .75)\n\n 75% \n22.8 \n\n\n\n\n\n7.1.3 Associations\nIn statistics, we may be interested on how different variables are related to each other. These associations can be represented in a numerical value.\n\n7.1.3.1 Continuous and Continuous\nWhen we measure the association between to continuous variables, we tend to use a correlation statistic. This statistic tells us how linearly associated are the variables are to each other. Essentially, as one variable increases, what happens to the other variable? Does it increase (positive association) or does it decrease (negative association). To find the correlation in R, use the cor(). You will need to specify the x= and y= which represents vectors for each variable. Find the correlation between mpg and hp from the mtcars data set.\n\ncor(mtcars$mpg, mtcars$hp)\n\n[1] -0.7761684\n\n\n\n\n7.1.3.2 Categorical and Continuous\nWhen comparing categorical variables, it becomes a bit more nuanced in how to report associations. Most of time you will discuss key differences in certain groups. Here, we will talk about how to get the means for different groups of data. Our continuous variable is the mpg variable, and our categorical variable is the cyl variable. Both are from the mtcars data set. The tapply() allows us to split the data into different groups and then calculate different statistics. We only need to specify X= of the R object to split, INDEX= which is a list of factors or categories indicating how to split the data set, and FUN= which is the function that needs to be computed. Use the tapply() and find the mean mpg for each cyl group: 4, 5, and 6.\n\ntapply(mtcars$mpg, list(mtcars$cyl), mean)\n\n       4        6        8 \n26.66364 19.74286 15.10000 \n\n\n\n\n7.1.3.3 Categorical and Categorical\nReporting the association between two categorical variables is may be challenging. If you have a \\(2\\times 2\\) table, you can report a ratio of association. However, any other case may be challenging. You can report a hypothesis test to indicate an association, but it does not provide much information about the effect of each variable. You can also report row, column, or table proportions. Here we will talk about creating cross tables and report these proportions. To create a cross table, use the table() and use the first two arguments to specify the two categorical variables. Create a cross tabulation between cyl and carb from the mtcars data set.\n\ntable(mtcars$cyl, mtcars$carb)\n\n   \n    1 2 3 4 6 8\n  4 5 6 0 0 0 0\n  6 2 0 0 4 1 0\n  8 0 4 3 6 0 1\n\n\nNotice how the first argument is represented in the rows and the second argument is in the columns. Now create table proportions using both of the variables. You first need to create the table and store it in a variable and then use the prop.table().\n\nprop.table(table(mtcars$cyl, mtcars$carb))\n\n   \n          1       2       3       4       6       8\n  4 0.15625 0.18750 0.00000 0.00000 0.00000 0.00000\n  6 0.06250 0.00000 0.00000 0.12500 0.03125 0.00000\n  8 0.00000 0.12500 0.09375 0.18750 0.00000 0.03125\n\n\nTo get the row proportions, use the argument margin = 1 within the prop.table().\n\nprop.table(table(mtcars$cyl, mtcars$carb), \n           margin = 1)\n\n   \n             1          2          3          4          6          8\n  4 0.45454545 0.54545455 0.00000000 0.00000000 0.00000000 0.00000000\n  6 0.28571429 0.00000000 0.00000000 0.57142857 0.14285714 0.00000000\n  8 0.00000000 0.28571429 0.21428571 0.42857143 0.00000000 0.07142857\n\n\nTo get the column proportions, use the argument margin = 2 within the prop.table().\n\nprop.table(table(mtcars$cyl, mtcars$carb), \n           margin = 2)\n\n   \n            1         2         3         4         6         8\n  4 0.7142857 0.6000000 0.0000000 0.0000000 0.0000000 0.0000000\n  6 0.2857143 0.0000000 0.0000000 0.4000000 1.0000000 0.0000000\n  8 0.0000000 0.4000000 1.0000000 0.6000000 0.0000000 1.0000000"
  },
  {
    "objectID": "data_summary.html#summarizing-with-tidyverse",
    "href": "data_summary.html#summarizing-with-tidyverse",
    "title": "7  Data Summarization",
    "section": "7.2 Summarizing with Tidyverse",
    "text": "7.2 Summarizing with Tidyverse\n\nlibrary(magrittr)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()   masks magrittr::extract()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ purrr::set_names() masks magrittr::set_names()\n\nf <- function(x){\n  mtcars %>% split(~.$cyl) %>% map(~shapiro.test(.$mpg)) \n  return(1)}\ng <- function(x){\n  mtcars %>% group_by(cyl) %>% nest() %>% mutate(shapiro = map(data, ~shapiro.test(.$mpg)))\n  return(1)}\nbench::mark(f(1),g(1))\n\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f(1)        406.7µs  465.4µs    2092.   134.23KB    14.7 \n2 g(1)         12.6ms   13.2ms      73.7    3.65MB     9.21"
  },
  {
    "objectID": "plot.html#base-r-plotting",
    "href": "plot.html#base-r-plotting",
    "title": "8  Graphics",
    "section": "8.1 Base R Plotting",
    "text": "8.1 Base R Plotting\n\n8.1.1 Introduction\nThis tutorial provides an introduction on how to create different graphics in R. For this tutorial, we will focus on plotting different components from the mtcars data set.\n\n\n8.1.2 Contents\n\nBasic\nGrouping\nTweaking\n\n\n\n8.1.3 Basic Graphics\nHere we will use the built-in R functions to create different graphics. The main function that you will use is the plot(). It contains much of the functionality to create many different plots in R. Additionally, it works well for different classes of R objects. It will provide many important plots that you will need for a certain statistical analysis.\n\n\n8.1.4 Scatter Plot\nLet’s first create a scatter plot for one variable using the mpg variable. This is done using the plot() and setting the first argument x= to the vector.\n\nplot(mtcars$mpg)\n\n\n\n\nNotice that the x-axis is the index (which is not informative) and the y-axis is the mpg values.\nLet’s connect the points with a line. This is done by setting the type= to \"l\".\n\nplot(mtcars$mpg, type = \"l\")\n\n\n\n\nLet’s add the points back to the plot and keep the lines. What we are going to do is first create the scatter plot as we did before, but we will also use the lines() to add the lines. The lines() needs the x= which is a vector of points (mpg). The two lines of code must run together.\n\nplot(mtcars$mpg)\nlines(mtcars$mpg)\n\n\n\n\nNow, let’s create a more realistic scatter plot with 2 variables. This is done by specifying the y= with another variable in addition to the x= in the plot=. Plot a scatter plot between mpg and disp.\n\nplot(mtcars$mpg,mtcars$disp)\n\n\n\n\nNow, let’s change the the axis labels and plot title. This is done by using the arguments main=, xlab=, and ylab. The main= changes the title of the plot.\n\n\n8.1.5 Histogram\nTo create a histogram, use the hist(). The hist() only needs x= which is numerical vector. Create a histogram with the mpg variable.\n\nhist(mtcars$mpg)\n\n\n\n\nIf you want to change the number of breaks in the histogram, use the breaks=. Create a new histogram of the mpg variable with ten breaks.\n\nhist(mtcars$mpg, breaks = 10)\n\n\n\n\nThe above histograms provide frequencies instead of relative frequencies. If you want relative frequencies, use the freq= and set it equal to FALSE in the hist().\n\nhist(mtcars$mpg, freq = FALSE)\n\n\n\n\n\n\n8.1.6 Density Plot\nA density plot can be used instead of a histogram. This is done by using the density() to create an object containing the information to create density function. Then, use the plot() to display the plot. The only argument the density() needs is the x= which is the data to be used. Create a density plot the mpg variable.\n\nplot(density(mtcars$mpg))\n\n\n\n\nNow, if we want to overlay the density function over a histogram, use the lines() with the output from the density() as its main input. First create the histogram using the hist() and setting the freq= to FALSE. Then use the lines() to overlay the density. Make sure to run both lines together.\n\nhist(mtcars$mpg, freq = FALSE)\nlines(density(mtcars$mpg))\n\n\n\n\n\n\n8.1.7 Box Plots\nA commonly used plot to display relevant statistics is the box plot. To create a box plot use the boxplot(). The function only needs the x= which specifies the data to create the box plot. Use the box plot function to create a box plot on for the variable mpg.\n\nboxplot(mtcars$mpg)\n\n\n\n\nIf you want to make the box plot horizontal, use horizontal= and set it equal to TRUE.\n\nboxplot(mtcars$mpg, horizontal = TRUE)\n\n\n\n\n\n\n8.1.8 Bar Chart\nA histogram shows you the frequency for a continuous variable. A bar chart will show you the frequency of a categorical or discrete variable. To create a bar chart, use the barplot(). The main argument it needs is the height= which needs to an object from the table(). Create a bar chart for the cyl variable.\n\nbarplot(table(mtcars$cyl))\n\n\n\n\n\n\n8.1.9 Pie Chart\nWhile I do not recommend using a pie chart, R is capable of creating one using the pie(). It only needs the x= which is a vector numerical quantities. This could be the output from the table(). Create a pie chart with the cyl variable.\n\npie(table(mtcars$cyl))\n\n\n\n\n\n\n8.1.10 Grouping\nSimilar to obtaining statistics for certain groups, plots can be grouped to reveal certain trends. We will look at a couple of methods to visualize different groups.\n\n8.1.10.1 One Variable Grouping\nTwo ways to display groups is by using color coding or panels. I will show you what I think is the best way to group variables. There may be better ways to do this, such as using the ggplot2 package. Before we begin, create three new R objects that are a subset of the mtcars data set into 3 different data sets with for the three different values of the cyl variable: “4”, “6”, and “8”. use the subset() to create the different data sets. Name the new R objects mtcars_4, mtcars_6, and mtcars_8, respectively.\n\nmtcars_4 <- subset(mtcars, cyl == 4)\nmtcars_6 <- subset(mtcars, cyl == 6)\nmtcars_8 <- subset(mtcars, cyl == 8)\n\n\n8.1.10.1.1 Scatter Plot\nTo create different colors points for their respective label associated cyl variable. First create a base scatter plot using the plot() to set up the plot. Then one by one, overlay a set of new points on the base plot using the points(). The first two arguments should be the vectors of data from their respective R object subset. Also, use the col= to change the color of the points. The col= takes either a string or a number.\n\nplot(mtcars$mpg, mtcars$disp)\npoints(mtcars_4$mpg, mtcars_4$disp, col = \"red\")\npoints(mtcars_6$mpg, mtcars_6$disp, col = \"blue\")\npoints(mtcars_8$mpg, mtcars_8$disp, col = \"green\")\n\n\n\n\n\n\n8.1.10.1.2 Histogram\nNow, it us more difficult to overlay histograms on a plot to different colors. Therefore, a panel approach may be more beneficial. This can be done by setting up R to plot a grid of plots. To do this, use the par() to tell R how to set up the grid. Then use the mfrow=, which is a vector of length two, to set up a grid. The mfrow= usually has an input of c(ROWS,COLS) which states the number of rows and the number of columns. Once this is done, the next plots you create will be used to populate the grid.\n\npar(mfrow=c(1,3))\nhist(mtcars_4$mpg)\nhist(mtcars_6$mpg)\nhist(mtcars_8$mpg)\n\n\n\n\nEvery time you use the par(), it will change how graphics are created in an R session. Therefore, all your plots will follow the new graphic parameters. You will need to reset it by typing dev.off().\n\n\n8.1.10.1.3 Bar Chart\nTo visualize two categorical variables, we can use a color-coded bar chart to compare the frequencies of the categories. This is simple to do with the barplot(). First, use the table() to create a cross-tabulation of the frequencies for two variables. Then use the boxplot() to visualize both variables. Then use legend= to create a label when the bar chart is color-coded. Additionally, use the beside= argument to change how the plot looks. Use the code below to compare the variables cyl and am variable.\n\nbarplot(table(mtcars$cyl, mtcars$am), beside = TRUE, legend = rownames(table(mtcars$cyl, mtcars$am)))\n\n\n\n\nNotice that I use the rownames() to label the legend.\n\n\n\n\n8.1.11 Tweaking\n\n8.1.11.1 Labels\nThe main tweaking of plots I will talk about is changing the the axis label and titles. For the most part, each function allows you to use the main=, xlab=, and ylab=. The main= allows you to change the title. The xlab= and ylab= allow you to change the labels for the x-axis and y-axis, respectively. Create a scatter plot for the variables mpg and disp and change the labels.\n\nplot(mtcars$mpg, mtcars$disp, main = \"MPG vs Displacement\", xlab = \"MPG\", ylab = \"Displacement\")"
  },
  {
    "objectID": "plot.html#ggplot2",
    "href": "plot.html#ggplot2",
    "title": "8  Graphics",
    "section": "8.2 ggplot2",
    "text": "8.2 ggplot2\n\n8.2.1 Introduction\nThe ggplot2:: provides a set of functions to create different graphics. For more information on plotting in ggplot2::, please visit the this excellent resource. Here we will discuss some of the basics to the ggplot2::``. To me,ggplot2::`creates a plot by adding layers to a base plot. The syntax is designed for you to change different components of a plot in an intuitive manner. For this tutorial, we will focus on plotting different components from thempg` data set.\n\n8.2.1.1 Contents\n\nBasic\nGrouping\nThemes/Tweaking\n\n\n\n\n8.2.2 Basics\nTo begin, the ggplot2:: really works well when you are using data frames. If you have any output that you want to plot, convert into to a data frame. Once we have our data set, the first thing you would want to do is specify the main components of your base plot. This will be what will be plotted on your x-axis, and what will be plotted on your y-axis. Next, you will create the the type of plot. Lastly, you will add different layers to tweak the plot for your needs. This can be changing the layout or even overlaying another plot. The `ggplot2::`` provides you with tools to do almost everything you need to create a plot easily.\nBefore we begin plotting, load the ggplot2:: in R.\n\nlibrary(ggplot2)\n\nNow, when we create a base plot, we will use the ggplot(). This will initialize the data that we need to use with the data= and how to map it on the x and y axis with the mapping=. With the mapping=, you will need to use the aes() which constructs the mapping function for the base plot. The aes() requires the x= and optionally uses the y= to set which values represents the x and y axis. The aes() also accepts other arguments for grouping or other aesthetics.\nBefore we begin, create a new variable in mtcars called ind and place a numeric vector which contains integers from 1 to 32.\n\nmtcars$ind <- c(1:32)\n\nNow, let’s create the base plot and assign it to gg_1. Use the ggplot() and set mtcars as its data and the variable ind as x= and mpg as the y=\n\ngg_1 <- ggplot(mtcars, aes(ind, mpg))\n\nThis base plot is now used to create certain plots. Plots are created by adding functions to the base plot. This is done by using the + operator and then a specific ggplot2:: function. Below we will go over some of the functions necessary.\n\n\n8.2.3 Scatter Plot\nTo create a scatter plot in ggplot2::, add the geom_point() to the base plot. You do not need to specify any arguments in the function. Create a scatter plot to gg_1\n\ngg_1 + geom_point()\n\n\n\n\nIf we want to put lines instead of points, we will need to use the geom_point(). Change the points to a line.\n\ngg_1 + geom_line()\n\n\n\n\nTo overlay points to the plot, add geom_point() as well as geom_line(). Add points to the plot above.\n\ngg_1 + geom_point() + geom_line()\n\n\n\n\nTo create a 2 variable scatter plot. You will just need to specify the x= and y= in the aes(). Create a base plot using the mtcars data set and use the mpg and disp as the x and y variables, respectively, and assign in it to gg_2\n\ngg_2 <- ggplot(mtcars, aes(mpg, disp))\n\nNow create a scatter plot using gg_2.\n\ngg_2 + geom_point()\n\n\n\n\n\n\n8.2.4 Histogram and Density Plot\nTo create a histogram and density plots, create a base plot and specify the variable of interest in the aes(), only specify one variable. Create a base plot using the mtcars data set and the mpg variable. Assign it to gg_3.\n\ngg_3 <- ggplot(mtcars, aes(mpg))\n\nTo create a histogram, use the geom_histogram().\n\ngg_3 + geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nThe above plot shows a histogram, but the number of bins is quite large. We can change the bin width argument, binwidth=, the the geom_histogram(). Change the bin width to seven.\n\ngg_3 + geom_histogram(binwidth = 7)\n\n\n\n\n\n8.2.4.1 Density Plot\nTo create a density plot, use the geom_density(). Create a density plot for the mpg variable.\n\ngg_3 + geom_density()\n\n\n\n\n\n\n8.2.4.2 Both\nSimilar to adding lines and points in the same plot, you can add a histogram and a density plot by adding both the geom_histogram() and geom_density(). However, in the geom_histogram(), you must add aes(y=..density..) to create a frequency histogram. Create a plot with a histogram and a density plot.\n\ngg_3 + geom_histogram(aes(y=..density..),bins=7) +\n  geom_density()\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n8.2.5 Box Plots\nIf you need to create a box plot, use the stat_boxplot(). Create a boxplot for the variable mpg. All you need to do is add stat_boxplot().\n\ngg_3 + stat_boxplot()\n\n\n\n\n\n\n8.2.6 Bar Charts\nCreating a bar chart is similar to create a box plot. All you need to do is use the stat_count(). First create a base plot using the mtcars data sets and the cyl variable for the mapping and assign it to gg_4.\n\ngg_4 <- ggplot(mtcars, aes(cyl))\n\nNow create the bar plot by adding the stat_count().\n\ngg_4 + stat_count()\n\n\n\n\n\n\n8.2.7 Grouping\nThe `ggplot2::`` easily allows you to create plots from different groups. We will go over some of the arguments and functions to do this.\n\n8.2.7.1 One Variable Grouping\n\n8.2.7.1.1 Scatter Plot\nTo begin, we want to specify the grouping variable within the aes() with the color=. Additionally, the argument works best with a factor variable, so use the factor() to create a factor variable. Create a base plot from the mtcars data set using mpg and disp for the x and y axis, respectively, and set the color= equal to the factor(cyl). Assign it the R object gg_5.\n\ngg_5 <- ggplot(mtcars, aes(mpg, disp, color=factor(cyl)))\n\nOnce the base plot is created, `ggplot2::`` will automatically group the data in the plots. Create the scatter plot from the base plot.\n\ngg_5 + geom_point()\n\n\n\n\nIf you want to change the shapes instead of the color, use the shape=. Create a base plot from the mtcars data set using mpg, and disp for the x and y axis, respectively, and group it by cyl with the shape=. Assign it the R object gg_6.\n\ngg_6 <- ggplot(mtcars, aes(mpg, disp, shape=factor(cyl)))\ngg_6 + geom_point()\n\n\n\n\n\n\n8.2.7.1.2 Histograms\nHistograms can be grouped by different colors. This is done by using the fill= within the aes() in the base plot. Assign it the R object gg_7.\n\ngg_7 <- ggplot(mtcars, aes(mpg, fill = factor(cyl)))\n\nNow create a histogram from the base plot gg_7.\n\ngg_7 + geom_histogram(bins = 6, alpha = 0.3)\n\n\n\n\nSometimes we would like to view the histogram on separate plots. The facet_wrap() and the flact_grid() allows this. Using either function, you do not need to specify the grouping factor in the aes(). You will add facet_wrap() to the plot. It needs a formula argument with the grouping variable. Using the R object gg_3 create side by side plots using the cyl variable. Remember to add geom_histogram().\n\ngg_3+geom_histogram() + facet_wrap( ~ cyl)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n8.2.7.1.3 Density Plot\nSimilar to histograms, density plots can be grouped by variables the same way. Using gg_7, create color-coded density plots. All you need to do is add geom_density().\n\ngg_7 + geom_density(alpha=0.3)\n\n\n\n\nUsing gg_3, create side by side density plots. You need to do is add geom_density() and facet_wrap() to group with the cyl variable.\n\ngg_3 + geom_density() + facet_wrap( ~ cyl)\n\n\n\n\n\n\n8.2.7.1.4 Bar Chart\nTo create a side by side bar plot, you can use the facet_wrap() with a grouping variable. Using gg_4, create a side by side bar plot using vs as the grouping variable. Remember to add stat_count() as well.\n\ngg_4 + stat_count() + facet_wrap(~vs)\n\n\n\n\nIf you want to compare the bars from different group in one plot, you can use the fill= from the aes(). The fill= just needs a factor variable (use factor()). First create a base plot using the data mtcars, variable cyl and grouping variable vs. Assign it to gg_8.\n\ngg_8 <- ggplot(mtcars, aes(cyl, fill = factor(vs)))\n\nNow create a bar chart by adding stat_count().\n\ngg_8 + stat_count()\n\n\n\n\nIf you want to grouping bars to be side by side, use the position= in the stat_count() and set it equal to \"dodge\". Create the bar plot using the position = \"dodge\".\n\ngg_8 + stat_count(position = \"dodge\")\n\n\n\n\n\n\n\n\n8.2.8 Themes/Tweaking\nIn this section, we will talk about the basic tweaks and themes to ggplot2::. However. ggplot2:: is much more powerful and can do much more. Before we begin, lets look at object gg_9 to understand the plot. To view a plot, use the plot().\n\n\n\n\nplot(gg_9)\n\n\n\n\n\n8.2.8.1 Title\nTo change the title, add the ggtitle() to the plot. Put the new title in quotes as the first argument. Change the title for gg_9.\n\ngg_9 + ggtitle(\"Scatter Plot\")\n\n\n\n\n\n\n8.2.8.2 Axis\nChanging the labels for a plot, add the xlab() and ylab(), respectively. The first argument contains the phrase for the axis. Change the axis labels for gg_9.\n\ngg_9 + xlab(\"MPG\") + ylab(\"Displacement\")\n\n\n\n\n\n\n8.2.8.3 Themes\nIf you don’t like how the plot looks, ggplot2:: has custom themes you can add to the plot to change it. These functions usually are formatted as theme_*(), where the * indicates different possibilities. I personally like how theme_bw() looks. Change the theme of gg_9.\n\ngg_9 + theme_bw()\n\n\n\n\nAdditionally, you can change certain part of the theme using the theme(). I encourage you to look at what are other possibilities.\n\n\n\n8.2.9 Saving plot\nIf you want to save the plot, use the ggsave(). Read the help documentation for the functions capabilities."
  }
]