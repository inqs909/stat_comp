[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing",
    "section": "",
    "text": "Introduction\nWelcome to Statistical Computing! A book designed to give undergraduate students exposure to several topics related to computational statistics and programming in R.\n\n\n\n\n\n\nNote\n\n\n\nThis book is a work in progress and will contain several grammatical errors and unfinished chapters. The final product is expected to be ready by the 2026-27 Academic Year.\n\n\nThis work is published under a CC-BY-4.0 license.\n\nInstalling R\nR is an open-source programming language used to conduct statistical analysis. You can freely download and install R here.\n\n\nInstalling Positron\nPositron is an Integrated Development Environment (IDE) used for data science. It contains several tools needed to extend your programming and project management skills.\nYou can download and install the open-source (free) version of Positron here.\n\n\nInstalling Quarto\nQuarto is a technical documentation system that allows you to embed narrative, code, and output in one document. Quarto should be automatically install from Positron; however, you can update (or install) it here.\n\n\nInstalling R Packages\nR Packages extends the functionality from the base functions in R. R packages contain extra functions to conduct uncommon statistical models.\nThe tidyverse is a set of comprehensive packages to prepare and analyze data. To install tidyverse, use the following line in the console:\n\ninstall.packages(\"tidyverse\")\n\n\n\nTopics\n\n\n\n\n\n\n\nTopic\nDescription\n\n\n\n\nProbability and Statistics\nA review of different topics related to probability theory and statistics.\n\n\nMonte Carlo Methods\nExplore different algorithms to generate random variables.\n\n\nRandomizations\nLearn how to implement different permutation tests.\n\n\nBootstrapping\nConduct different bootstrapping techniques to construct confidence intervals.\n\n\nSimulations\nImplement Monte Carlo methods to approximate hypothesis tests, simulation studies, and power analysis.\n\n\nR Programming\nProvide with a brief introduction to R programming. Topics include basic computations, control flow statements, functional programming, scripting, summarization and plotting",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Statistical Computing",
    "section": "",
    "text": "Welcome to Statistical Computing! A book designed to give undergraduate students exposure to several topics related to computational statistics and programming in R.",
    "crumbs": [
      "preface.html"
    ]
  },
  {
    "objectID": "rv.html",
    "href": "rv.html",
    "title": "1  Random Variables",
    "section": "",
    "text": "1.1 Random Experiments",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Random Variables</span>"
    ]
  },
  {
    "objectID": "rv.html#probability",
    "href": "rv.html#probability",
    "title": "1  Random Variables",
    "section": "1.2 Probability",
    "text": "1.2 Probability",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Random Variables</span>"
    ]
  },
  {
    "objectID": "rv.html#independence",
    "href": "rv.html#independence",
    "title": "1  Random Variables",
    "section": "1.3 Independence",
    "text": "1.3 Independence",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Random Variables</span>"
    ]
  },
  {
    "objectID": "rv.html#random-variables",
    "href": "rv.html#random-variables",
    "title": "1  Random Variables",
    "section": "1.4 Random Variables",
    "text": "1.4 Random Variables\n\n1.4.1 Discrete RV\n\n1.4.1.1 Probability Mass Functions\n\n\n1.4.1.2 Expectation\n\n\n1.4.1.3 Variance\n\n\n1.4.1.4 Moment-Generating Functions\n\n\n\n1.4.2 Continuous RV\n\n1.4.2.1 Probability Density Functions\n\n\n1.4.2.2 Expectation\n\n\n1.4.2.3 Variance\n\n\n1.4.2.4 Moment-Generating Functions",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Random Variables</span>"
    ]
  },
  {
    "objectID": "rv.html#joint-distributions",
    "href": "rv.html#joint-distributions",
    "title": "1  Random Variables",
    "section": "1.5 Joint Distributions",
    "text": "1.5 Joint Distributions\n\n1.5.1 Joint Probability Density Function\n\n\n1.5.2 Conditional Density Functions\n\n\n1.5.3 Marginal Density Functions\n\n\n1.5.4 Independence and Covariance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Random Variables</span>"
    ]
  },
  {
    "objectID": "rv.html#functions-of-random-variables",
    "href": "rv.html#functions-of-random-variables",
    "title": "1  Random Variables",
    "section": "1.6 Functions of Random Variables",
    "text": "1.6 Functions of Random Variables\n\n1.6.1 Method of Distribution Functions\n\n\n1.6.2 Method of Transformations\n\n\n1.6.3 Method of Moment-Generating Functions",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Random Variables</span>"
    ]
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "2  Probability Models",
    "section": "",
    "text": "2.1 Bernoulli Model",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#bernoulli-model",
    "href": "models.html#bernoulli-model",
    "title": "2  Probability Models",
    "section": "",
    "text": "2.1.1 Distribution Functions\n\n\n2.1.2 Expected Value\n\n\n2.1.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#binomial-model",
    "href": "models.html#binomial-model",
    "title": "2  Probability Models",
    "section": "2.2 Binomial Model",
    "text": "2.2 Binomial Model\n\n2.2.1 Distribution Functions\n\n\n2.2.2 Expected Value\n\n\n2.2.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#poisson-model",
    "href": "models.html#poisson-model",
    "title": "2  Probability Models",
    "section": "2.3 Poisson Model",
    "text": "2.3 Poisson Model\n\n2.3.1 Distribution Functions\n\n\n2.3.2 Expected Value\n\n\n2.3.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#negative-binomial-model",
    "href": "models.html#negative-binomial-model",
    "title": "2  Probability Models",
    "section": "2.4 Negative Binomial Model",
    "text": "2.4 Negative Binomial Model\n\n2.4.1 Distribution Functions\n\n\n2.4.2 Expected Value\n\n\n2.4.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#multinomial-model",
    "href": "models.html#multinomial-model",
    "title": "2  Probability Models",
    "section": "2.5 Multinomial Model",
    "text": "2.5 Multinomial Model\n\n2.5.1 Distribution Functions\n\n\n2.5.2 Expected Value\n\n\n2.5.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#uniform-model",
    "href": "models.html#uniform-model",
    "title": "2  Probability Models",
    "section": "2.6 Uniform Model",
    "text": "2.6 Uniform Model\n\n2.6.1 Distribution Functions\n\n\n2.6.2 Expected Value\n\n\n2.6.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#normal-model",
    "href": "models.html#normal-model",
    "title": "2  Probability Models",
    "section": "2.7 Normal Model",
    "text": "2.7 Normal Model\n\n2.7.1 Distribution Functions\n\n\n2.7.2 Expected Value\n\n\n2.7.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#gamma-model",
    "href": "models.html#gamma-model",
    "title": "2  Probability Models",
    "section": "2.8 Gamma Model",
    "text": "2.8 Gamma Model\n\n2.8.1 Distribution Functions\n\n\n2.8.2 Expected Value\n\n\n2.8.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#beta-model",
    "href": "models.html#beta-model",
    "title": "2  Probability Models",
    "section": "2.9 Beta Model",
    "text": "2.9 Beta Model\n\n2.9.1 Distribution Functions\n\n\n2.9.2 Expected Value\n\n\n2.9.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "models.html#weibull-model",
    "href": "models.html#weibull-model",
    "title": "2  Probability Models",
    "section": "2.10 Weibull Model",
    "text": "2.10 Weibull Model\n\n2.10.1 Distribution Functions\n\n\n2.10.2 Expected Value\n\n\n2.10.3 Variance",
    "crumbs": [
      "Probability and Statistics Review",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability Models</span>"
    ]
  },
  {
    "objectID": "mc.html",
    "href": "mc.html",
    "title": "4  Monte Carlo Methods",
    "section": "",
    "text": "4.1 Probability Inverse Transformation\nMonte Carlo Methods are used to determine the",
    "crumbs": [
      "Monte Carlo Methods",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Monte Carlo Methods</span>"
    ]
  },
  {
    "objectID": "mc.html#composition-method",
    "href": "mc.html#composition-method",
    "title": "4  Monte Carlo Methods",
    "section": "4.2 Composition Method",
    "text": "4.2 Composition Method",
    "crumbs": [
      "Monte Carlo Methods",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Monte Carlo Methods</span>"
    ]
  },
  {
    "objectID": "mc.html#acceptance-rejection-method",
    "href": "mc.html#acceptance-rejection-method",
    "title": "4  Monte Carlo Methods",
    "section": "4.3 Acceptance-Rejection Method",
    "text": "4.3 Acceptance-Rejection Method",
    "crumbs": [
      "Monte Carlo Methods",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Monte Carlo Methods</span>"
    ]
  },
  {
    "objectID": "mc.html#box-muller-methods",
    "href": "mc.html#box-muller-methods",
    "title": "4  Monte Carlo Methods",
    "section": "4.4 Box-Muller Methods",
    "text": "4.4 Box-Muller Methods",
    "crumbs": [
      "Monte Carlo Methods",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Monte Carlo Methods</span>"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "14  Basic R Programming",
    "section": "",
    "text": "14.1 Introduction\nThis chapter focuses on the basics of R programming. While most of your statistical analysis will be done with R functions, it is important to have an idea of what is going on. Additionally, we will cover other topics that you may or may not need to know. The topics we will cover are:",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#introduction",
    "href": "basics.html#introduction",
    "title": "14  Basic R Programming",
    "section": "",
    "text": "Basic calculations in R\nTypes of Data\nR Objects\nR Functions\nR Packages",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#basic-calculations",
    "href": "basics.html#basic-calculations",
    "title": "14  Basic R Programming",
    "section": "14.2 Basic Calculations",
    "text": "14.2 Basic Calculations\nThis section focuses on the basic calculation that can be done in R. This is done by using different operators in R. The table below provides some of the basic operators R can use:\n\n\n\nOperator\nDescription\n\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivides\n\n\n^ or **\nExponentiate\n\n\n?\nHelp Documentation\n\n\n\n\n14.2.1 Calculator\n\n14.2.1.1 Addition\nTo add numbers in R, all you need to use the + operator. For example \\(2 + 2 = 4\\). When you type it in R you have:\n\n2 + 2\n\n[1] 4\n\n\nWhen you ask R to perform a task, it prints out the result of the task. As we can see above, R prints out the number 4.\nTo add more than 2 numbers, you can simply just type it in.\n\n2 + 2 + 2\n\n[1] 6\n\n\nThis provides the number 6.\n\n\n14.2.1.2 Subtraction\nTo subtract numbers, you need to use the - operator. Try 4 - 2:\n\n4 - 2\n\n[1] 2\n\n\nTry 4 - 6 - 4\n\n4 - 6 - 4\n\n[1] -6\n\n\nNotice that you get a negative number.\nNow try 4 + 4 - 2 + 8:\n\n4 + 4 - 2 + 8\n\n[1] 14\n\n\n\n\n14.2.1.3 Multiplication\nTo multiply numbers, you will need to use the * operator. Try 4 * 4:\n\n4 * 4\n\n[1] 16\n\n\n\n\n14.2.1.4 Division\nTo divide numbers, you can use the / operator. Try 9 / 3:\n\n9 / 3\n\n[1] 3\n\n\n\n\n14.2.1.5 Exponents\nTo exponentiate a number to the power of another number, you can use the ^ operator. Try 2^5:\n\n2^5\n\n[1] 32\n\n\nIf you want to find \\(e^2\\), you will use the exp() function. Try exp(2):\n\nexp(2)\n\n[1] 7.389056\n\n\n\n\n14.2.1.6 Roots\nTo take the n-th root of a value, use the ^ operator with the / operator to take the n-th root. For example, to take \\(\\sqrt[5]{35}\\), type 32^(1/5):\n\n32^(1/5)\n\n[1] 2\n\n\n\n\n14.2.1.7 Logarithms\nTo take the natural logarithm of a value, you will use the log() function. Try log(5):\n\nlog(5)\n\n[1] 1.609438\n\n\nIf you want to take the logarithm of a different base, you will use the log() function with base argument. We will discuss this more in Section 14.4.\n\n\n\n14.2.2 Comparing Numbers\nAnother important part of R is comparing numbers. When you compare two numbers, R will tell if the statement is TRUE or FALSE. Below are the different comparisons you can make:\n\n\n\nOperator\nDescription\n\n\n\n\n&gt;\nGreater Than\n\n\n&lt;\nLess Than\n\n\n&gt;=\nGreater than or equal\n\n\n&lt;=\nLess than or equal\n\n\n==\nEquals\n\n\n!=\nNot Equals\n\n\n\n\n14.2.2.1 Less than/Greater than\nTo check if one number is less than or greater than another number, you will use the &gt; or &lt; operators. Try 5 &gt; 4:\n\n5 &gt; 4\n\n[1] TRUE\n\n\nNotice that R states it’s true. It evaluates the expression and tells you if it’s true or not. Try 5 &lt; 4:\n\n5 &lt; 4\n\n[1] FALSE\n\n\nNotice that R tells you it is false.\n\n\n14.2.2.2 Less than or equal to/Greater than or equal to\nTo check if one number is less than or equal to/greater than or equal to another number, you will use the &gt;= or &lt;= operators. Try 5 &gt;= 5:\n\n5 &gt;= 5\n\n[1] TRUE\n\n\nTry 5 &gt;= 4:\n\n5 &gt;= 4\n\n[1] TRUE\n\n\nTry 5 &lt;= 4\n\n5 &lt;= 4\n\n[1] FALSE\n\n\n\n\n14.2.2.3 Equals and Not Equals\nTo check if 2 numbers are equal to each other, you can use the == operator. Try 3 == 3:\n\n3 == 3\n\n[1] TRUE\n\n\nTry 4 == 3\n\n3 == 4\n\n[1] FALSE\n\n\nAnother way to see if 2 numbers are not equal to each other, you can use the !=. Try 3 != 4:\n\n3 != 4\n\n[1] TRUE\n\n\nTry 3 != 3:\n\n3 != 3\n\n[1] FALSE\n\n\nYou may be asking why use != instead of ==. They both provides similar results. Well the reason is that you may need the TRUE output for analysis. One is only true when they are equal, while the other is true when they are not equal.\nIn general, the ! operator means not or opposite. It can be used to change an TRUE to a FALSE and vice-versa.\n\n\n\n14.2.3 Help\nThe last operator we will discuss is the help operator ?. If you want to know more about anything we talked about you can type ? in front of a function and a help page will pop-up in your browser or in RStudio’s ‘Help’ tab. For example you can type ?Arithmetic or ?Comparison, to review what we talked about. For other operators we didn’t talk about use ?assignOps and ?Logic.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#types-of-data",
    "href": "basics.html#types-of-data",
    "title": "14  Basic R Programming",
    "section": "14.3 Types of Data",
    "text": "14.3 Types of Data\nIn R, the type of data, also known as class, we are using dictates how the programming works. For the most part, users will use numeric, logical, POSIX and character data types. Other types of data you may encounter are complex and raw. To obtain more information on them, use the ? operator.\n\n14.3.1 Numeric\nThe numeric class is the data that are numbers. Almost every analysis that you use will be based on the numeric class. To check if you have a numeric class, you just need to use the is.numeric() function. For example, try is.numeric(5):\n\nis.numeric(5)\n\n[1] TRUE\n\n\nNumeric classes are essentially double and integer types of data. For example a double data is essentially a number with decimal value. An integer data are whole numbers. Try is.numeric(5.63), is.double(5.63) and is.integer(5.63):\n\nis.numeric(5.63)\n\n[1] TRUE\n\nis.double(5.63)\n\n[1] TRUE\n\nis.integer(5.63)\n\n[1] FALSE\n\n\nNotice how the value \\(5.63\\) is a numeric and double but not integer. Now let’s try is.numeric(7), is.double(7) and is.integer(7):\n\nis.numeric(7)\n\n[1] TRUE\n\nis.double(7)\n\n[1] TRUE\n\nis.integer(7)\n\n[1] FALSE\n\n\nNotice how the value \\(7\\) is also considered a numeric and double but not integer. This is because typing a whole number will be stored as a double. However, if we need to store an integer, we will need to type the letter “L” after the number. Try is.numeric(7L), is.double(7L), and is.integer(7L):\n\nis.numeric(7L)\n\n[1] TRUE\n\nis.double(7L)\n\n[1] FALSE\n\nis.integer(7L)\n\n[1] TRUE\n\n\n\n\n14.3.2 Logical\nA logical class are data where the only value is TRUE or FALSE. Sometimes the data is coded as 1 for TRUE and 0 for FALSE. The data may also be coded as T or F. To check if data belongs in the logical class, you will need the is.logical() function. Try is.logical(3 &lt; 4):\n\nis.logical(3 &lt; 4)\n\n[1] TRUE\n\n\nThis is same comparison from Section 14.2.2. The output was TRUE. Now R is checking whether the output is of a logical class. Since it it, R returns TRUE. Now try is.logical(3 &gt; 4):\n\nis.logical(3 &gt; 4)\n\n[1] TRUE\n\n\nThe output is TRUE as well even though the condition 3 &gt; 4 is FALSE. Since the output is a logical data type, it is a logical variable.\n\n\n14.3.3 POSIX\nThe POSIX class are date-time data. Where the data value is a time component. The POSIX class can be very complex in how it is formatted. IF you would like to learn more try ?POSIXct or ?POSIClt. First, lets run Sys.time() to check what is today’s data and time:\n\nSys.time()\n\n[1] \"2024-03-16 23:09:59 PDT\"\n\n\nNow lets check if its of POSIX class, you can use the class() function to figure out which class is it. Try class(Sys.time()):\n\nclass(Sys.time())\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\n\n\n14.3.4 Character\nA character value is where the data values follow a string format. Examples of character values are letters, words and even numbers. A character value is any value surrounded by quotation marks. For example, the phrase “Hello World!” is considered as one character value. Another example is if your data is coded with the actual words “yes” or “no”. To check if you have character data, use the is.character() function. Try is.character(\"Hello World!\"):\n\nis.character(\"Hello World!\")\n\n[1] TRUE\n\n\nNotice that the output says TRUE. Character values can be created with single quotations. Try is.character('Hello World!'):\n\nis.character('Hello World!')\n\n[1] TRUE\n\n\n\n\n14.3.5 Complex Numbers\nComplex numbers are data values where there is a real component and an imaginary component. The imaginary component is a number multiplied by \\(i=\\sqrt{-1}\\). To create a complex number, use the complex() function. To check if a number is complex, use the is.complex() function. Try the following to create a complex number complex(1, 4, 5):\n\ncomplex(1, 4, 5)\n\n[1] 4+5i\n\n\nNow try is.complex(complex(1, 4, 5)):\n\nis.complex(complex(1, 4, 5))\n\n[1] TRUE\n\n\n\n\n14.3.6 Raw\nYou will probably never use raw data. I have never used raw data in R. To create a raw value, use the raw() or charToRaw() functions. Try charToRaw('Hello World!'):\n\ncharToRaw('Hello World!')\n\n [1] 48 65 6c 6c 6f 20 57 6f 72 6c 64 21\n\n\nTo check if you have raw data, use the is.raw() function. Try is.raw(charToRaw('Hello World!')):\n\nis.raw(charToRaw('Hello World!'))\n\n[1] TRUE\n\n\n\n\n14.3.7 Missing\nThe last data class in R is missing data. The table below provides a brief introduction of the different types of missing data\n\n\n\n\n\n\n\n\nValue\nDescription\nFunctions\n\n\n\n\nNULL\nThese are values indicating an object is empty. Often used for functions with values that are undefined.\nis.null()\n\n\nNA\nStands for “Not Available”, used to indicate that the value is missing in the data.\nis.na()\n\n\nNaN\nStands for “Not an Number”. Used to indicate a missing number.\nis.nan()\n\n\nInf and -Inf\nIndicating an extremely large value or a value divided by 0.\nis.infinite()",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#sec-r-functions",
    "href": "basics.html#sec-r-functions",
    "title": "14  Basic R Programming",
    "section": "14.4 R Functions",
    "text": "14.4 R Functions\nAn R function is the procedure that R will execute to certain data. For example, the log(x) is an R function. It takes the value x and provides you the natural logarithm. Here x is known as an argument which needs to be specified to us the log() function. Find the log(x = 5)\n\nlog(x = 5)\n\n[1] 1.609438\n\n\nAnother argument for the log() function is the base argument. With the previous code, we did not specify the base argument, so R makes the base argument equal to the number \\(e\\). If you want to use the common log with base 10, you will need to set the base argument equal to 10.\nTry log(x = 5, base = 10)\n\nlog(x = 5, base = 10)\n\n[1] 0.69897\n\n\nNow try log(5,10)\n\nlog(5,10)\n\n[1] 0.69897\n\n\nNotice that it provides the same value. This is because R can set arguments based on the values position in the function, regardless if the arguments are specified. For log(5,10), R thinks that 5 corresponds to the first argument x and 10 is the second argument base.\nTo learn more about a functions, use the ? operator on the function: ?log.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#sec-r-objects",
    "href": "basics.html#sec-r-objects",
    "title": "14  Basic R Programming",
    "section": "14.5 R Objects",
    "text": "14.5 R Objects\nR objects are where most of your data will be stored. An R object can be thought of as a container of data. Each object will share some sort of characteristics that will make the unique for different types of analysis.\n\n14.5.1 Assigning objects\nTo create an R object, all we need to do is assign data to a variable. The variable is the name of the R object. it can be called anything, but you can only use alphanumeric values, underscore, and periods. To assign a value to a variable, use the &lt;- operator. This is known a left assignment. Kinda like an arrow pointing left. Try assigning 9 to ‘x’ (x &lt;- 9):\n\nx &lt;- 9\n\nTo see if x contains 9, type x in the console:\n\nx\n\n[1] 9\n\n\nNow x can be treated as data and we can perform data analysis on it. For example, try squaring it:\n\nx^2\n\n[1] 81\n\n\nYou can use any mathematical operation from the previous sections. Try some other operations and see what happens.\nThe output R prints out can be stored in a variable using the asign operator, &lt;-. Try storing x^3 in a variable called x_cubed:\n\nx_cubed &lt;- x^3\n\nTo see what is stored in x_cubed you can either type x_cubed in the console or use the print() function with x_cubed inside the parenthesis.\n\nx_cubed\n\n[1] 729\n\nprint(x_cubed)\n\n[1] 729\n\n\n\n\n14.5.2 Vectors\nA vector is a set data values of a certain length. The R object x is considered as a numerical vector (because it contains a number) with the length 1. To check, try is.numeric(x) and is.vector(x):\n\nis.numeric(x)\n\n[1] TRUE\n\nis.vector(x)\n\n[1] TRUE\n\n\nNow let’s create a logical vector that contains 4 elements (have it follow this sequence: T, F, T, F) and assign it to y. To create a vector use the c()1 function and type all the values and separating them with columns. Type y &lt;- c(T, F, T, F):\n\ny &lt;- c(T, F, T, F)\n\nNow, lets see how y looks like. Type y:\n\ny\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\nNow lets see if it’s a logical vector:\n\nis.logical(y)\n\n[1] TRUE\n\nis.vector(y)\n\n[1] TRUE\n\n\nFortunately, this vector is really small to count how many elements it has, but what if the vector is really large? To find out how many elements a vector has, use the length() function. Try length(y):\n\nlength(y)\n\n[1] 4\n\n\n\n\n14.5.3 Matrices\nA matrix can be thought as a square or rectangular grid of data values. This grid can be constructed can be any size. Similar to vectors they must contain the same data type. The size of a matrix is usually denoted as \\(n\\times k\\), where \\(n\\) represents the number of rows and \\(k\\) represents the number of columns. To get a rough idea of how a matrix may look like, type matrix(rep(1,12), nrow = 4, ncol = 3)2:\n\nmatrix(rep(1, 12), nrow = 4, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n[3,]    1    1    1\n[4,]    1    1    1\n\n\nNotice that this is a \\(4\\times 3\\) matrix. Each element in the matrix has the value 1. Now try this matrix(rbinom(12,1.5), nrow = 4, ncol = 3)3:\n\nmatrix(rbinom(12, 1, .5), nrow = 4, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    0    1    0\n[2,]    1    1    1\n[3,]    1    1    0\n[4,]    1    1    0\n\n\nYour matrix may look different, but that is to be expected. Notice that some elements in a matrix are 0’s and some are 1’s. Each element in a matrix can hold any value.\nAn alternate approach to creating matrices is with the use of rbind() and cbind() functions. Using 2 vectors, and matrices, of the same length, the rbind() will append the vectors together by each row. Similarly, the cbind() function will append vectors, and matrices, of the same length by columns.\n\nx &lt;- 1:4\ny &lt;- 5:8\nz &lt;- 9:12\ncbind(x, y, z)\n\n     x y  z\n[1,] 1 5  9\n[2,] 2 6 10\n[3,] 3 7 11\n[4,] 4 8 12\n\nrbind(x, y, z)\n\n  [,1] [,2] [,3] [,4]\nx    1    2    3    4\ny    5    6    7    8\nz    9   10   11   12\n\n\nIf you want to create a matrix of a specific size without any data, you can use the matrix() function and only specify the nrow and ncol arguments. Here we are creating a \\(5\\times 11\\) empty matrix:\n\nmatrix(nrow = 5, ncol = 11)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]\n[1,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA    NA\n[2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA    NA\n[3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA    NA\n[4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA    NA\n[5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA    NA\n\n\nLastly, if you need to find out the dimensions of a matrix, you can use dim() function on a matrix:\n\ndim(matrix(nrow = 5, ncol = 11))\n\n[1]  5 11\n\n\nThis will return a vector of length 2 with the first element being the number of rows and the second element being the number of columns.\n\n\n14.5.4 Arrays\nMatrices can be considered as a 2-dimensional block of numbers. An array is an n-dimensional block of numbers. While you may never need to use an array for data analysis. It may come in handy when programming by hand. To create an array, use the array() function. Below is an example of a \\(3 \\times 3 \\times 3\\) with the numbers 1, 2, and 3 representing the 3rd dimension stored in an R object called first_array4.\n\n(first_array &lt;- array(c(rep(1, 9), rep(2, 9), rep(3, 9)),\n                      dim=c(3,3,3)))\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n[3,]    1    1    1\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    2    2    2\n[2,]    2    2    2\n[3,]    2    2    2\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]    3    3    3\n[2,]    3    3    3\n[3,]    3    3    3\n\n\n\n\n14.5.5 Data Frames\nData frames are similar to data set that you may encounter in an excel file. However, there are a couple of differences. First, each row represents an observation, and each column represents a characteristic of the observation. Additionally, each column in a data frame will be the same data type. To get an idea of what a data frame looks like, try head(iris) 5:\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nIn the data frame, the rows indicate a specific observation and the columns are the values of a variable. In terms of the iris data set, we can see that row 1 is a specific flower that has a sepal length of 5.1. We can also see that flower 1 has other characteristics such as sepal width and petal length. Lastly, there are results for the other flowers.\nNow try tail(iris):\n\ntail(iris)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\nThe tail() function provides the last 6 rows of the data frame.\nLastly, if you are interested in viewing a specific variable (column) from a data frame, you can use the $ operator to specify which variable from a specific data frame. For example, if we are interested in observing the Sepal.Length variable from the iris data frame, we will type iris$Sepal.Length:\n\niris$Sepal.Length\n\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n[127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n\n\n\n\n14.5.6 Lists\nTo me a list is just a container that you can store practically anything. It is compiled of elements, where each element contains an R object. For example, the first element of a list may contain a data frame, the second element may contain a vector, and the third element may contain another list. It is just a way to store things.\nTo create a list, use the list() function. Create a list compiled of first element with the mtcars data set, second element with a vector of zeros of size 4, and a matrix \\(3 \\times 3\\) identity matrix6. Store the list in an object called list_one:\n\nlist_one &lt;- list(mtcars, rep(0, 4),\n                 diag(rep(1, 3)))\n\nType list_one to see what pops out:\n\nlist_one\n\n[[1]]\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n[[2]]\n[1] 0 0 0 0\n\n[[3]]\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\nEach element in the list is labeled as a number. It is more useful to have the elements named. An element is named by typing the name in quotes followed by the = symbol before your object in the list() function (mtcars=mtcars).\n\nlist_one &lt;- list(mtcars = mtcars,\n                 vector = rep(0, 4),\n                 identity = diag(rep(1, 3)))\n\nHere I am creating an object called list_one, where the first element is mtcars labeled mtcars, the second element is a vector of zeros labeled vector and the last element is the identity matrix labeled identity.’\nNow create a new list called list_two and store list_one labeled as list_one and first_array labeled as array.\n\n(list_two &lt;- list(list_one = list_one,\n                  array = first_array))\n\n$list_one\n$list_one$mtcars\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n$list_one$vector\n[1] 0 0 0 0\n\n$list_one$identity\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n$array\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n[3,]    1    1    1\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    2    2    2\n[2,]    2    2    2\n[3,]    2    2    2\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]    3    3    3\n[2,]    3    3    3\n[3,]    3    3    3",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#r-packages",
    "href": "basics.html#r-packages",
    "title": "14  Basic R Programming",
    "section": "14.6 R Packages",
    "text": "14.6 R Packages\nAs I stated before, R can be extended to do more things, such as create this tutorial. This is done by installing R packages. An R package can be thought of as extra software. This allows you to do more with R. To install an R package, you will need to use install.packages(\"NAME_OF_PACKAGE\"). Once you install it, you do not need to install it again. To use the R package, use library(\"NAME_OF_PACKAGE\"). This allows you to load the package in R. You will need to load the package every time you start R. For more information, please watch the video: https://vimeo.com/203516241.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "basics.html#footnotes",
    "href": "basics.html#footnotes",
    "title": "14  Basic R Programming",
    "section": "",
    "text": "The c() function allows you to put any data type and as many values as you wish. The only condition of a vector is that it must be the same data type.↩︎\nThe function rep() creates a vector by repeating a value for a certain length. rep(1,12) creates a vector of length 12 with each element being 1. We use the nrow and ncol arguments in the function to specify the number of rows and columns, respectfully.↩︎\nThe rbinom() function generates binomial random variables and stores them in a vector. rbinom(12,1,5) This creates 12 random binomial numbers with parameter \\(n=1\\) and \\(p=0.5\\).↩︎\nNotice the code is surrounded by parenthesis. This tells R to store the array and print out the results. You can surround code with parenthesis every time you create an object to also print what is stored.↩︎\nThe head() function just tells R to only print the top few components of the data frame.↩︎\nAn identity matrix is a matrix where the diagonal elements are 1 and the non-diagonal elements are 0↩︎",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Basic R Programming</span>"
    ]
  },
  {
    "objectID": "data_summary.html",
    "href": "data_summary.html",
    "title": "15  Data Summarization",
    "section": "",
    "text": "15.1 Descriptive Statistics\nHere, we will go over some of the basic syntax to obtain basic statistics. We will use the variables mpg and cyl from the mtcars data set. To view the data set use the head():\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\nThe variable mpg would be used as a continuous variable, and the variable cyl would be used as a categorical variable.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "data_summary.html#descriptive-statistics",
    "href": "data_summary.html#descriptive-statistics",
    "title": "15  Data Summarization",
    "section": "",
    "text": "15.1.1 Point Estimates\nThe first basic statistic you can compute are point estimates. These are your means, medians, etc. Here we will calculate these estimates.\n\n15.1.1.1 Mean\nTo obtain the mean, use the mean(), you only need to specify x= for the data to compute the mean:\n\nmean(mtcars$mpg)\n\n[1] 20.09062\n\n\n\n\n15.1.1.2 Median\nTo obtain the median, use the median(), you only need to specify x= for the data to compute the median:\n\nmedian(mtcars$mpg)\n\n[1] 19.2\n\n\n\n\n15.1.1.3 Frequency\nTo obtain a frequency table, use the table(), you only need to specify the data as the first argument to compute the frequency table:\n\ntable(mtcars$cyl)\n\n\n 4  6  8 \n11  7 14 \n\n\n\n\n15.1.1.4 Proportion\nTo obtain a the proportions for the frequency table, use the prop.table(). However the first argument must be the results from the table(). Use the table() inside the prop.table() to get the proportions:\n\nprop.table(table(mtcars$cyl))\n\n\n      4       6       8 \n0.34375 0.21875 0.43750 \n\n\n\n\n\n15.1.2 Variability\nIn addition to point estimates, variability is an important statistic to report to let a user know about the spread of the data. Here we will calculate certain variability statistics.\n\n15.1.2.1 Variance\nTo obtain the variance, use the var(), you only need to specify x= for the data to compute the variance:\n\nvar(mtcars$mpg)\n\n[1] 36.3241\n\n\n\n\n15.1.2.2 Standard deviation\nTo obtain the standard deviation, use the sd(), you only need to specify x= for the data to compute the standard deviation:\n\nsd(mtcars$mpg)\n\n[1] 6.026948\n\n\n\n\n15.1.2.3 Max and Min\nTo obtain the max and min, use the max() and min(), respectively. You only need to specify the data as the first argument to compute the max and min:\n\nmax(mtcars$mpg)\n\n[1] 33.9\n\nmin(mtcars$mpg)\n\n[1] 10.4\n\n\n\n\n15.1.2.4 Q1 and Q3\nTo obtain the Q1 and Q3, use the quantile() and specify the desired quantile with probs=. You only need to specify the data as the first argument and probs= (as a decimal) to compute the Q1 and Q3:\n\nquantile(mtcars$mpg, .25)\n\n   25% \n15.425 \n\nquantile(mtcars$mpg, .75)\n\n 75% \n22.8 \n\n\n\n\n\n15.1.3 Associations\nIn statistics, we may be interested on how different variables are related to each other. These associations can be represented in a numerical value.\n\n15.1.3.1 Continuous and Continuous\nWhen we measure the association between to continuous variables, we tend to use a correlation statistic. This statistic tells us how linearly associated are the variables are to each other. Essentially, as one variable increases, what happens to the other variable? Does it increase (positive association) or does it decrease (negative association). To find the correlation in R, use the cor(). You will need to specify the x= and y= which represents vectors for each variable. Find the correlation between mpg and hp from the mtcars data set.\n\ncor(mtcars$mpg, mtcars$hp)\n\n[1] -0.7761684\n\n\n\n\n15.1.3.2 Categorical and Continuous\nWhen comparing categorical variables, it becomes a bit more nuanced in how to report associations. Most of time you will discuss key differences in certain groups. Here, we will talk about how to get the means for different groups of data. Our continuous variable is the mpg variable, and our categorical variable is the cyl variable. Both are from the mtcars data set. The tapply() allows us to split the data into different groups and then calculate different statistics. We only need to specify X= of the R object to split, INDEX= which is a list of factors or categories indicating how to split the data set, and FUN= which is the function that needs to be computed. Use the tapply() and find the mean mpg for each cyl group: 4, 5, and 6.\n\ntapply(mtcars$mpg, list(mtcars$cyl), mean)\n\n       4        6        8 \n26.66364 19.74286 15.10000 \n\n\n\n\n15.1.3.3 Categorical and Categorical\nReporting the association between two categorical variables is may be challenging. If you have a \\(2\\times 2\\) table, you can report a ratio of association. However, any other case may be challenging. You can report a hypothesis test to indicate an association, but it does not provide much information about the effect of each variable. You can also report row, column, or table proportions. Here we will talk about creating cross tables and report these proportions. To create a cross table, use the table() and use the first two arguments to specify the two categorical variables. Create a cross tabulation between cyl and carb from the mtcars data set.\n\ntable(mtcars$cyl, mtcars$carb)\n\n   \n    1 2 3 4 6 8\n  4 5 6 0 0 0 0\n  6 2 0 0 4 1 0\n  8 0 4 3 6 0 1\n\n\nNotice how the first argument is represented in the rows and the second argument is in the columns. Now create table proportions using both of the variables. You first need to create the table and store it in a variable and then use the prop.table().\n\nprop.table(table(mtcars$cyl, mtcars$carb))\n\n   \n          1       2       3       4       6       8\n  4 0.15625 0.18750 0.00000 0.00000 0.00000 0.00000\n  6 0.06250 0.00000 0.00000 0.12500 0.03125 0.00000\n  8 0.00000 0.12500 0.09375 0.18750 0.00000 0.03125\n\n\nTo get the row proportions, use the argument margin = 1 within the prop.table().\n\nprop.table(table(mtcars$cyl, mtcars$carb), \n           margin = 1)\n\n   \n             1          2          3          4          6          8\n  4 0.45454545 0.54545455 0.00000000 0.00000000 0.00000000 0.00000000\n  6 0.28571429 0.00000000 0.00000000 0.57142857 0.14285714 0.00000000\n  8 0.00000000 0.28571429 0.21428571 0.42857143 0.00000000 0.07142857\n\n\nTo get the column proportions, use the argument margin = 2 within the prop.table().\n\nprop.table(table(mtcars$cyl, mtcars$carb), \n           margin = 2)\n\n   \n            1         2         3         4         6         8\n  4 0.7142857 0.6000000 0.0000000 0.0000000 0.0000000 0.0000000\n  6 0.2857143 0.0000000 0.0000000 0.4000000 1.0000000 0.0000000\n  8 0.0000000 0.4000000 1.0000000 0.6000000 0.0000000 1.0000000",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "data_summary.html#summarizing-with-tidyverse",
    "href": "data_summary.html#summarizing-with-tidyverse",
    "title": "15  Data Summarization",
    "section": "15.2 Summarizing with Tidyverse",
    "text": "15.2 Summarizing with Tidyverse\n\nlibrary(magrittr)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()   masks magrittr::extract()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ purrr::set_names() masks magrittr::set_names()\n\nf &lt;- function(x){\n  mtcars %&gt;% split(~.$cyl) %&gt;% map(~shapiro.test(.$mpg)) \n  return(1)}\ng &lt;- function(x){\n  mtcars %&gt;% group_by(cyl) %&gt;% nest() %&gt;% mutate(shapiro = map(data, ~shapiro.test(.$mpg)))\n  return(1)}\nbench::mark(f(1),g(1))\n\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 f(1)        404.4µs  434.7µs    2242.   134.23KB    16.9 \n2 g(1)         11.7ms   11.8ms      82.8    3.65MB     8.95",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "16  Graphics",
    "section": "",
    "text": "16.1 Base R Plotting\nThrough out this chapter, we use certain notations for different components in R. To begin, when something is in a gray block, _, this indicates that R code is being used. When I am talking about an R Object, it will be displayed as a word. For example, we will be using the R object mtcars. When I am talking about an R function, it will be displayed as a word followed by an open and close parentheses. For example, we will use the mean function denoted as mean() (read this as “mean function”). When I am talking about an R argument for a function, it will be displayed as a word following by an equal sign. For example, we will use the data argument denoted as data= (read this as “data argument”). When I am referencing an R package, I will use :: (two colons) after the name. For example, in this tutorial, I will use the ggplot2:: (read this as “ggplot2 package”) Lastly, if I am displaying R code for your reference or to run, it will be displayed on its own line. There are many components in R, and my hope is that this will help you understand what components am I talking about.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Graphics</span>"
    ]
  },
  {
    "objectID": "plot.html#base-r-plotting",
    "href": "plot.html#base-r-plotting",
    "title": "16  Graphics",
    "section": "",
    "text": "16.1.1 Introduction\nThis tutorial provides an introduction on how to create different graphics in R. For this tutorial, we will focus on plotting different components from the mtcars data set.\n\n\n16.1.2 Contents\n\nBasic\nGrouping\nTweaking\n\n\n\n16.1.3 Basic Graphics\nHere we will use the built-in R functions to create different graphics. The main function that you will use is the plot(). It contains much of the functionality to create many different plots in R. Additionally, it works well for different classes of R objects. It will provide many important plots that you will need for a certain statistical analysis.\n\n\n16.1.4 Scatter Plot\nLet’s first create a scatter plot for one variable using the mpg variable. This is done using the plot() and setting the first argument x= to the vector.\n\nplot(mtcars$mpg)\n\n\n\n\n\n\n\n\nNotice that the x-axis is the index (which is not informative) and the y-axis is the mpg values.\nLet’s connect the points with a line. This is done by setting the type= to \"l\".\n\nplot(mtcars$mpg, type = \"l\")\n\n\n\n\n\n\n\n\nLet’s add the points back to the plot and keep the lines. What we are going to do is first create the scatter plot as we did before, but we will also use the lines() to add the lines. The lines() needs the x= which is a vector of points (mpg). The two lines of code must run together.\n\nplot(mtcars$mpg)\nlines(mtcars$mpg)\n\n\n\n\n\n\n\n\nNow, let’s create a more realistic scatter plot with 2 variables. This is done by specifying the y= with another variable in addition to the x= in the plot=. Plot a scatter plot between mpg and disp.\n\nplot(mtcars$mpg,mtcars$disp)\n\n\n\n\n\n\n\n\nNow, let’s change the the axis labels and plot title. This is done by using the arguments main=, xlab=, and ylab. The main= changes the title of the plot.\n\n\n16.1.5 Histogram\nTo create a histogram, use the hist(). The hist() only needs x= which is numerical vector. Create a histogram with the mpg variable.\n\nhist(mtcars$mpg)\n\n\n\n\n\n\n\n\nIf you want to change the number of breaks in the histogram, use the breaks=. Create a new histogram of the mpg variable with ten breaks.\n\nhist(mtcars$mpg, breaks = 10)\n\n\n\n\n\n\n\n\nThe above histograms provide frequencies instead of relative frequencies. If you want relative frequencies, use the freq= and set it equal to FALSE in the hist().\n\nhist(mtcars$mpg, freq = FALSE)\n\n\n\n\n\n\n\n\n\n\n16.1.6 Density Plot\nA density plot can be used instead of a histogram. This is done by using the density() to create an object containing the information to create density function. Then, use the plot() to display the plot. The only argument the density() needs is the x= which is the data to be used. Create a density plot the mpg variable.\n\nplot(density(mtcars$mpg))\n\n\n\n\n\n\n\n\nNow, if we want to overlay the density function over a histogram, use the lines() with the output from the density() as its main input. First create the histogram using the hist() and setting the freq= to FALSE. Then use the lines() to overlay the density. Make sure to run both lines together.\n\nhist(mtcars$mpg, freq = FALSE)\nlines(density(mtcars$mpg))\n\n\n\n\n\n\n\n\n\n\n16.1.7 Box Plots\nA commonly used plot to display relevant statistics is the box plot. To create a box plot use the boxplot(). The function only needs the x= which specifies the data to create the box plot. Use the box plot function to create a box plot on for the variable mpg.\n\nboxplot(mtcars$mpg)\n\n\n\n\n\n\n\n\nIf you want to make the box plot horizontal, use horizontal= and set it equal to TRUE.\n\nboxplot(mtcars$mpg, horizontal = TRUE)\n\n\n\n\n\n\n\n\n\n\n16.1.8 Bar Chart\nA histogram shows you the frequency for a continuous variable. A bar chart will show you the frequency of a categorical or discrete variable. To create a bar chart, use the barplot(). The main argument it needs is the height= which needs to an object from the table(). Create a bar chart for the cyl variable.\n\nbarplot(table(mtcars$cyl))\n\n\n\n\n\n\n\n\n\n\n16.1.9 Pie Chart\nWhile I do not recommend using a pie chart, R is capable of creating one using the pie(). It only needs the x= which is a vector numerical quantities. This could be the output from the table(). Create a pie chart with the cyl variable.\n\npie(table(mtcars$cyl))\n\n\n\n\n\n\n\n\n\n\n16.1.10 Grouping\nSimilar to obtaining statistics for certain groups, plots can be grouped to reveal certain trends. We will look at a couple of methods to visualize different groups.\n\n16.1.10.1 One Variable Grouping\nTwo ways to display groups is by using color coding or panels. I will show you what I think is the best way to group variables. There may be better ways to do this, such as using the ggplot2 package. Before we begin, create three new R objects that are a subset of the mtcars data set into 3 different data sets with for the three different values of the cyl variable: “4”, “6”, and “8”. use the subset() to create the different data sets. Name the new R objects mtcars_4, mtcars_6, and mtcars_8, respectively.\n\nmtcars_4 &lt;- subset(mtcars, cyl == 4)\nmtcars_6 &lt;- subset(mtcars, cyl == 6)\nmtcars_8 &lt;- subset(mtcars, cyl == 8)\n\n\n16.1.10.1.1 Scatter Plot\nTo create different colors points for their respective label associated cyl variable. First create a base scatter plot using the plot() to set up the plot. Then one by one, overlay a set of new points on the base plot using the points(). The first two arguments should be the vectors of data from their respective R object subset. Also, use the col= to change the color of the points. The col= takes either a string or a number.\n\nplot(mtcars$mpg, mtcars$disp)\npoints(mtcars_4$mpg, mtcars_4$disp, col = \"red\")\npoints(mtcars_6$mpg, mtcars_6$disp, col = \"blue\")\npoints(mtcars_8$mpg, mtcars_8$disp, col = \"green\")\n\n\n\n\n\n\n\n\n\n\n16.1.10.1.2 Histogram\nNow, it us more difficult to overlay histograms on a plot to different colors. Therefore, a panel approach may be more beneficial. This can be done by setting up R to plot a grid of plots. To do this, use the par() to tell R how to set up the grid. Then use the mfrow=, which is a vector of length two, to set up a grid. The mfrow= usually has an input of c(ROWS,COLS) which states the number of rows and the number of columns. Once this is done, the next plots you create will be used to populate the grid.\n\npar(mfrow=c(1,3))\nhist(mtcars_4$mpg)\nhist(mtcars_6$mpg)\nhist(mtcars_8$mpg)\n\n\n\n\n\n\n\n\nEvery time you use the par(), it will change how graphics are created in an R session. Therefore, all your plots will follow the new graphic parameters. You will need to reset it by typing dev.off().\n\n\n16.1.10.1.3 Bar Chart\nTo visualize two categorical variables, we can use a color-coded bar chart to compare the frequencies of the categories. This is simple to do with the barplot(). First, use the table() to create a cross-tabulation of the frequencies for two variables. Then use the boxplot() to visualize both variables. Then use legend= to create a label when the bar chart is color-coded. Additionally, use the beside= argument to change how the plot looks. Use the code below to compare the variables cyl and am variable.\n\nbarplot(table(mtcars$cyl, mtcars$am), beside = TRUE, legend = rownames(table(mtcars$cyl, mtcars$am)))\n\n\n\n\n\n\n\n\nNotice that I use the rownames() to label the legend.\n\n\n\n\n16.1.11 Tweaking\n\n16.1.11.1 Labels\nThe main tweaking of plots I will talk about is changing the the axis label and titles. For the most part, each function allows you to use the main=, xlab=, and ylab=. The main= allows you to change the title. The xlab= and ylab= allow you to change the labels for the x-axis and y-axis, respectively. Create a scatter plot for the variables mpg and disp and change the labels.\n\nplot(mtcars$mpg, mtcars$disp, main = \"MPG vs Displacement\", xlab = \"MPG\", ylab = \"Displacement\")",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Graphics</span>"
    ]
  },
  {
    "objectID": "plot.html#ggplot2",
    "href": "plot.html#ggplot2",
    "title": "16  Graphics",
    "section": "16.2 ggplot2",
    "text": "16.2 ggplot2\n\n16.2.1 Introduction\nThe ggplot2:: provides a set of functions to create different graphics. For more information on plotting in ggplot2::, please visit the this excellent resource. Here we will discuss some of the basics to the ggplot2::``. To me,ggplot2::`creates a plot by adding layers to a base plot. The syntax is designed for you to change different components of a plot in an intuitive manner. For this tutorial, we will focus on plotting different components from thempg` data set.\n\n16.2.1.1 Contents\n\nBasic\nGrouping\nThemes/Tweaking\n\n\n\n\n16.2.2 Basics\nTo begin, the ggplot2:: really works well when you are using data frames. If you have any output that you want to plot, convert into to a data frame. Once we have our data set, the first thing you would want to do is specify the main components of your base plot. This will be what will be plotted on your x-axis, and what will be plotted on your y-axis. Next, you will create the the type of plot. Lastly, you will add different layers to tweak the plot for your needs. This can be changing the layout or even overlaying another plot. The `ggplot2::`` provides you with tools to do almost everything you need to create a plot easily.\nBefore we begin plotting, load the ggplot2:: in R.\n\nlibrary(ggplot2)\n\nNow, when we create a base plot, we will use the ggplot(). This will initialize the data that we need to use with the data= and how to map it on the x and y axis with the mapping=. With the mapping=, you will need to use the aes() which constructs the mapping function for the base plot. The aes() requires the x= and optionally uses the y= to set which values represents the x and y axis. The aes() also accepts other arguments for grouping or other aesthetics.\nBefore we begin, create a new variable in mtcars called ind and place a numeric vector which contains integers from 1 to 32.\n\nmtcars$ind &lt;- c(1:32)\n\nNow, let’s create the base plot and assign it to gg_1. Use the ggplot() and set mtcars as its data and the variable ind as x= and mpg as the y=\n\ngg_1 &lt;- ggplot(mtcars, aes(ind, mpg))\n\nThis base plot is now used to create certain plots. Plots are created by adding functions to the base plot. This is done by using the + operator and then a specific ggplot2:: function. Below we will go over some of the functions necessary.\n\n\n16.2.3 Scatter Plot\nTo create a scatter plot in ggplot2::, add the geom_point() to the base plot. You do not need to specify any arguments in the function. Create a scatter plot to gg_1\n\ngg_1 + geom_point()\n\n\n\n\n\n\n\n\nIf we want to put lines instead of points, we will need to use the geom_point(). Change the points to a line.\n\ngg_1 + geom_line()\n\n\n\n\n\n\n\n\nTo overlay points to the plot, add geom_point() as well as geom_line(). Add points to the plot above.\n\ngg_1 + geom_point() + geom_line()\n\n\n\n\n\n\n\n\nTo create a 2 variable scatter plot. You will just need to specify the x= and y= in the aes(). Create a base plot using the mtcars data set and use the mpg and disp as the x and y variables, respectively, and assign in it to gg_2\n\ngg_2 &lt;- ggplot(mtcars, aes(mpg, disp))\n\nNow create a scatter plot using gg_2.\n\ngg_2 + geom_point()\n\n\n\n\n\n\n\n\n\n\n16.2.4 Histogram and Density Plot\nTo create a histogram and density plots, create a base plot and specify the variable of interest in the aes(), only specify one variable. Create a base plot using the mtcars data set and the mpg variable. Assign it to gg_3.\n\ngg_3 &lt;- ggplot(mtcars, aes(mpg))\n\nTo create a histogram, use the geom_histogram().\n\ngg_3 + geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThe above plot shows a histogram, but the number of bins is quite large. We can change the bin width argument, binwidth=, the the geom_histogram(). Change the bin width to seven.\n\ngg_3 + geom_histogram(binwidth = 7)\n\n\n\n\n\n\n\n\n\n16.2.4.1 Density Plot\nTo create a density plot, use the geom_density(). Create a density plot for the mpg variable.\n\ngg_3 + geom_density()\n\n\n\n\n\n\n\n\n\n\n16.2.4.2 Both\nSimilar to adding lines and points in the same plot, you can add a histogram and a density plot by adding both the geom_histogram() and geom_density(). However, in the geom_histogram(), you must add aes(y=..density..) to create a frequency histogram. Create a plot with a histogram and a density plot.\n\ngg_3 + geom_histogram(aes(y=..density..),bins=7) +\n  geom_density()\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n16.2.5 Box Plots\nIf you need to create a box plot, use the stat_boxplot(). Create a boxplot for the variable mpg. All you need to do is add stat_boxplot().\n\ngg_3 + stat_boxplot()\n\n\n\n\n\n\n\n\n\n\n16.2.6 Bar Charts\nCreating a bar chart is similar to create a box plot. All you need to do is use the stat_count(). First create a base plot using the mtcars data sets and the cyl variable for the mapping and assign it to gg_4.\n\ngg_4 &lt;- ggplot(mtcars, aes(cyl))\n\nNow create the bar plot by adding the stat_count().\n\ngg_4 + stat_count()\n\n\n\n\n\n\n\n\n\n\n16.2.7 Grouping\nThe `ggplot2::`` easily allows you to create plots from different groups. We will go over some of the arguments and functions to do this.\n\n16.2.7.1 One Variable Grouping\n\n16.2.7.1.1 Scatter Plot\nTo begin, we want to specify the grouping variable within the aes() with the color=. Additionally, the argument works best with a factor variable, so use the factor() to create a factor variable. Create a base plot from the mtcars data set using mpg and disp for the x and y axis, respectively, and set the color= equal to the factor(cyl). Assign it the R object gg_5.\n\ngg_5 &lt;- ggplot(mtcars, aes(mpg, disp, color=factor(cyl)))\n\nOnce the base plot is created, `ggplot2::`` will automatically group the data in the plots. Create the scatter plot from the base plot.\n\ngg_5 + geom_point()\n\n\n\n\n\n\n\n\nIf you want to change the shapes instead of the color, use the shape=. Create a base plot from the mtcars data set using mpg, and disp for the x and y axis, respectively, and group it by cyl with the shape=. Assign it the R object gg_6.\n\ngg_6 &lt;- ggplot(mtcars, aes(mpg, disp, shape=factor(cyl)))\ngg_6 + geom_point()\n\n\n\n\n\n\n\n\n\n\n16.2.7.1.2 Histograms\nHistograms can be grouped by different colors. This is done by using the fill= within the aes() in the base plot. Assign it the R object gg_7.\n\ngg_7 &lt;- ggplot(mtcars, aes(mpg, fill = factor(cyl)))\n\nNow create a histogram from the base plot gg_7.\n\ngg_7 + geom_histogram(bins = 6, alpha = 0.3)\n\n\n\n\n\n\n\n\nSometimes we would like to view the histogram on separate plots. The facet_wrap() and the flact_grid() allows this. Using either function, you do not need to specify the grouping factor in the aes(). You will add facet_wrap() to the plot. It needs a formula argument with the grouping variable. Using the R object gg_3 create side by side plots using the cyl variable. Remember to add geom_histogram().\n\ngg_3+geom_histogram() + facet_wrap( ~ cyl)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n16.2.7.1.3 Density Plot\nSimilar to histograms, density plots can be grouped by variables the same way. Using gg_7, create color-coded density plots. All you need to do is add geom_density().\n\ngg_7 + geom_density(alpha=0.3)\n\n\n\n\n\n\n\n\nUsing gg_3, create side by side density plots. You need to do is add geom_density() and facet_wrap() to group with the cyl variable.\n\ngg_3 + geom_density() + facet_wrap( ~ cyl)\n\n\n\n\n\n\n\n\n\n\n16.2.7.1.4 Bar Chart\nTo create a side by side bar plot, you can use the facet_wrap() with a grouping variable. Using gg_4, create a side by side bar plot using vs as the grouping variable. Remember to add stat_count() as well.\n\ngg_4 + stat_count() + facet_wrap(~vs)\n\n\n\n\n\n\n\n\nIf you want to compare the bars from different group in one plot, you can use the fill= from the aes(). The fill= just needs a factor variable (use factor()). First create a base plot using the data mtcars, variable cyl and grouping variable vs. Assign it to gg_8.\n\ngg_8 &lt;- ggplot(mtcars, aes(cyl, fill = factor(vs)))\n\nNow create a bar chart by adding stat_count().\n\ngg_8 + stat_count()\n\n\n\n\n\n\n\n\nIf you want to grouping bars to be side by side, use the position= in the stat_count() and set it equal to \"dodge\". Create the bar plot using the position = \"dodge\".\n\ngg_8 + stat_count(position = \"dodge\")\n\n\n\n\n\n\n\n\n\n\n\n\n16.2.8 Themes/Tweaking\nIn this section, we will talk about the basic tweaks and themes to ggplot2::. However. ggplot2:: is much more powerful and can do much more. Before we begin, lets look at object gg_9 to understand the plot. To view a plot, use the plot().\n\nplot(gg_9)\n\n\n\n\n\n\n\n\n\n16.2.8.1 Title\nTo change the title, add the ggtitle() to the plot. Put the new title in quotes as the first argument. Change the title for gg_9.\n\ngg_9 + ggtitle(\"Scatter Plot\")\n\n\n\n\n\n\n\n\n\n\n16.2.8.2 Axis\nChanging the labels for a plot, add the xlab() and ylab(), respectively. The first argument contains the phrase for the axis. Change the axis labels for gg_9.\n\ngg_9 + xlab(\"MPG\") + ylab(\"Displacement\")\n\n\n\n\n\n\n\n\n\n\n16.2.8.3 Themes\nIf you don’t like how the plot looks, ggplot2:: has custom themes you can add to the plot to change it. These functions usually are formatted as theme_*(), where the * indicates different possibilities. I personally like how theme_bw() looks. Change the theme of gg_9.\n\ngg_9 + theme_bw()\n\n\n\n\n\n\n\n\nAdditionally, you can change certain part of the theme using the theme(). I encourage you to look at what are other possibilities.\n\n\n\n16.2.9 Saving plot\nIf you want to save the plot, use the ggsave(). Read the help documentation for the functions capabilities.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Graphics</span>"
    ]
  },
  {
    "objectID": "control_flow.html",
    "href": "control_flow.html",
    "title": "17  Control Flow",
    "section": "",
    "text": "17.1 Indexing",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#indexing",
    "href": "control_flow.html#indexing",
    "title": "17  Control Flow",
    "section": "",
    "text": "17.1.1 Vectors\nIn the Section 14.5, we discussed about different types of R objects. For example, a vector can be a certain data type with a set number of elements. Here we construct a vector called x increasing from -5 to 5 by one unit:\n\n(x &lt;- -5:5)\n\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n\nThe vector x has 11 elements. If I want to know what the 6th element of x, I can index the 6th element from a vector. To do this, we use [] square brackets on x to index it. For example, we index the 6th element of x:\n\nx[6]\n\n[1] 0\n\n\nWhen ever we use [] next to an R object, it will print out the data to a specific value inside the square brackets. We can index an R object with multiple values:\n\nx[1:3]\n\n[1] -5 -4 -3\n\nx[c(3,9)]\n\n[1] -3  3\n\n\nNotice how the second line uses the c(). This is necessary when we want to specify non-contiguous elements. Now let’s see how we can index a matrix\n\n\n17.1.2 Matrices\nA matrix can be indexed the same way as a vector using the [] brackets. However, since the matrix is a 2-dimensional objects, we will need to include a comma to represent the different dimensions: [,]. The first element indexes the row and the second element indexes the columns. To begin, we create the following \\(4 \\times 3\\) matrix:\n\n(x &lt;- matrix(1:12, nrow = 4, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\nNow to index the element at row 2 and column 3, use x[2, 3]:\n\nx[2, 3]\n\n[1] 10\n\n\nWe can also index a specific row and column:\n\nx[2,]\n\n[1]  2  6 10\n\nx[,3]\n\n[1]  9 10 11 12\n\n\n\n\n17.1.3 Data Frames\nThere are several ways to index a data frame, since it is in a matrix format, you can index it the same way as a matrix. Here are a couple of examples using the mtcars data frame.\n\nmtcars[,2]\n\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n\nmtcars[2,]\n\n              mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4\n\n\nHowever, a data frame has labeled components, variables, we can index the data frame with the variable names within the brackets:\n\nmtcars[, \"cyl\"]\n\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n\n\nLastly, a data frame can be indexed to a specific variable using the $ notation as described in Section 14.5.5.\n\n\n17.1.4 Lists\nAs described in Section 14.5.6, lists contain elements holding different R objects. To index a specific element of a list, you will use [[]] double brackets. Below is a toy list:\n\ntoy_list &lt;- list(mtcars = mtcars,\n                 vector = rep(0, 4),\n                 identity = diag(rep(1, 3)))\n\nTo access the second element, vector element, you can type toy_list[[2]]\n\ntoy_list[[2]]\n\n[1] 0 0 0 0\n\n\nSince the elements are labeled within the list, you can place the label in quotes inside [[]]:\n\ntoy_list[[\"vector\"]]\n\n[1] 0 0 0 0\n\n\nThe element can be accessed using the $ notation with a list:\n\ntoy_list$vector\n\n[1] 0 0 0 0\n\n\nLastly, you can further index the list if needed, we can access the mpg variable in mtcars from the toy_list:\n\ntoy_list$mtcars$mpg\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\ntoy_list[[\"mtcars\"]]$mpg\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\ntoy_list$mtcars[,'mpg']\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#ifelse-statements",
    "href": "control_flow.html#ifelse-statements",
    "title": "17  Control Flow",
    "section": "17.2 If/Else Statements",
    "text": "17.2 If/Else Statements\nIn R, there are control flow functions that will dictate how a program will be executed. The first set of functions we will talk about are if and else statements. First, the if statement will evaluate a task, If the conditions is satisfied, yields TRUE, then it will conduct a certain task, if it fails, yields FALSE, the else statement will guide it to a different task. Below is a general format:\n\n\n\n\n\n\nImportant Concept\n\n\n\n\nif (condition) {\n  TRUE task\n} else {\n  FALSE task\n}\n\n\n\n\n17.2.1 Example\nBelow is an example where we generate x from a standard normal distribution and print the statement ‘positive’ or ‘non-positive’ based on the condition x &gt; 0.\n\nx &lt;- rnorm(1)\n\n## if statements\nif (x &gt; 0){\n  print(\"Positive\")\n} else {\n  print(\"Non-Positive\")\n}\n\n[1] \"Non-Positive\"\n\n\nWhat if we want to print the statement ‘negative’ as well if the value is negative? We will then need to add another if statement after the else statement since x &gt; 0 only lets us know if the value is positive.\n\nx &lt;- rnorm(1)\n\nif (x &gt; 0){\n  print(\"Positive\")\n} else if (x &lt; 0) {\n  print(\"Negative\")\n}\n\n[1] \"Positive\"\n\n\nAbove, we add the if statement with condition (x &lt; 0) indicating if the number is negative. Lastly, if x is ever \\(0\\), we will want R to let us know it is \\(0\\). We can achieve this by adding one last else statement:\n\nx &lt;- rnorm(1)\n\nif (x &gt; 0){\n  print(\"Positive\")\n} else if (x &lt; 0) {\n  print(\"Negative\")\n} else {\n  print(\"Zero\")\n}\n\n[1] \"Positive\"",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#for-loops",
    "href": "control_flow.html#for-loops",
    "title": "17  Control Flow",
    "section": "17.3 for loops",
    "text": "17.3 for loops\nA for loop is a way to repeat a task a certain amount of times. Every time a loop repeats a task, we state it is an iteration of the loop. For each iteration, we may change the inputs by a certain way, either from an indexed vector, and repeat the task. The general anatomy of a loop looks like:\n\n\n\n\n\n\nImportant Concept\n\n\n\n\nfor (i in vector){\n  perform task\n}\n\n\n\nThe for statement indicates that you will repeat a task inside the brackets. The i in the parenthesis controls how the task will be completed. The in statement tells R where i can look for the values, and vectorr is a vector R object that contains the values i can be. It also controls how many times the task will be repeated based on the length of the vector.\nLearning about a loop is quite challenging, my recommendation is to read the section below and break the example code so you can understand how a for loop works.\n\n17.3.1 Basic for loop\nLet’s say we want R to print one to five separately. We can achieve this by repeating the print() 5 times.\n\nprint(1); print(2); print(3); print(4); print(5)\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\n[1] 4\n\n\n[1] 5\n\n\nHowever, this takes quite awhile to type up. Let’s try to achieve the same task using a for loop.\n\nfor (i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nHere, i will take a value from the vector 1:5,1 Then, R will print out what the value of i is.\nNow, let’s try another example with letters. To begin, create a new vector called letters_10 containing the first 10 letters of the alphabet. Use the vector letters to construct the neww vector.\n\nletters_10 &lt;- letters[1:10]\n\nNow, we will use a loop to print out the first 10 letters:\n\nfor (i in 1:10) {\n  print(letters_10[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\"\n[1] \"f\"\n[1] \"g\"\n[1] \"h\"\n[1] \"i\"\n[1] \"j\"\n\n\nHere, we have i take on the values 1 through 10. Using those values, we will index the vector letters_10 by i. The resulting letter will then be printed. This task repeated 10 times.\nLastly, we can replace 1:10 by letters_10 instead:\n\nfor (i in letters_10){\n  print(i)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\"\n[1] \"f\"\n[1] \"g\"\n[1] \"h\"\n[1] \"i\"\n[1] \"j\"\n\n\nThis is because letters_10 are the values that we want to print and i takes on the value of letters_10 each time.\n\n\n17.3.2 Nested for loops\nA nested for loop is a loop that contain a loop within. Below is an example of 3 for loops nested within each other. Below is a general example:\n\n\n\n\n\n\nImportant Concept\n\n\n\n\nfor (i in vector_1) {\n  for (ii in vector_2) {\n    for (iii in vector_3) {\n      perform task\n    }\n  }\n}\n\n\n\nAs an example, we will use the greekLetter2 package and use the print_greeks() function to obtain greek letters in R. Lastly, create a vector called greek_10.\n\nlibrary(greekLetters)\ngreek_10 &lt;- print_greeks()[1:10]\n\n                 alpha                   beta                  gamma \n                   \"α\"                    \"β\"                    \"γ\" \n                 delta                epsilon                   zeta \n                   \"δ\"                    \"ε\"                    \"ζ\" \n                   eta                  theta                   iota \n                   \"η\"                    \"θ\"                    \"ι\" \n                 kappa                 lambda                     mu \n                   \"κ\"                    \"λ\"                    \"μ\" \n                    nu                     xi                omicron \n                   \"ν\"                    \"ξ\"                    \"ο\" \n                    pi                    rho                  sigma \n                   \"π\"                    \"ρ\"                    \"σ\" \n                   tau                upsilon                    phi \n                   \"τ\"                    \"υ\"                    \"φ\" \n                   chi                    psi                  omega \n                   \"χ\"                    \"ψ\"                    \"ω\" \n                 Alpha                   Beta                  Gamma \n                   \"Α\"                    \"Β\"                    \"Γ\" \n                 Delta                Epsilon                   Zeta \n                   \"Δ\"                    \"Ε\"                    \"Ζ\" \n                   Eta                  Theta                   Iota \n                   \"Η\"                    \"Θ\"                    \"Ι\" \n                 Kappa                 Lambda                     Mu \n                   \"Κ\"                    \"Λ\"                    \"Μ\" \n                    Nu                     Xi                Omicron \n                   \"Ν\"                    \"Ξ\"                    \"Ο\" \n                    Pi                    Rho                  Sigma \n                   \"Π\"                    \"Ρ\"                    \"Σ\" \n                   Tau                Upsilon                    Phi \n                   \"Τ\"                    \"Υ\"                    \"Φ\" \n                   Chi                    Psi                  Omega \n                   \"Χ\"                    \"Ψ\"                    \"Ω\" \n              infinity         leftrightarrow                 forall \n                   \"∞\"                    \"⇔\"                    \"∀\" \n                 exist               notexist               emptyset \n                   \"∃\"                    \"∄\"                    \"∅\" \n             elementof           notelementof           proportional \n                   \"∈\"                    \"∉\"                    \"∝\" \n   asymptoticallyEqual notasymptoticallyEqual            approxEqual \n                   \"≃\"                    \"≄\"                    \"≅\" \n           almostEqual                    leq                    geq \n                   \"≈\"                    \"≤\"                    \"≥\" \n              muchless            muchgreater              leftarrow \n                   \"≪\"                    \"≫\"                    \"⇐\" \n            rightarrow                  equal               notEqual \n                   \"⇒\"                   \"＝\"                    \"≠\" \n              integral         doubleintegral         tripleintegral \n                   \"∫\"                    \"∬\"                    \"∭\" \n            logicalAnd              logicalOr           intersection \n                   \"∧\"                    \"∨\"                    \"∩\" \n                 union \n                   \"∪\" \n\n\nFor this example, we want R to print “a” and “\\(\\alpha\\)” together as demonstrated below3:\n\nprint(paste0(letters_10[1], greek_10[1]))\n\n[1] \"aα\"\n\n\nNow let’s repeat this process to print all possible combinations of the first 3 letters and 3 greek letters:\n\nfor (i in 1:3){\n  for (ii in 1:3){\n    print(paste0(letters_10[i], greek_10[ii]))\n  }\n}\n\n[1] \"aα\"\n[1] \"aβ\"\n[1] \"aγ\"\n[1] \"bα\"\n[1] \"bβ\"\n[1] \"bγ\"\n[1] \"cα\"\n[1] \"cβ\"\n[1] \"cγ\"",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#break",
    "href": "control_flow.html#break",
    "title": "17  Control Flow",
    "section": "17.4 break",
    "text": "17.4 break\nA break statement is used to stop a loop midway if a certain condition is met. A general setup of break statement goes as follows:\n\n\n\n\n\n\nImportant Concept\n\n\n\n\nfor (i in vector){\n  if (condition) {break}\n  else {\n    task\n  }\n}\n\n\n\nAs you can see there is an if statement in the loop. This is used to tell R when to break the loop. If the if statement was not there, then the loop will break without iterating.\nTo demonstrate the break statement, we will simulate from a \\(N(1,1)\\) until we have 30 positive numbers or we simulate a negative number.\n\nx &lt;- rep(NA,length = 30)\n\nfor (i in seq_along(x)){\n  y &lt;- rnorm(1,1)\n  if (y&lt;0) {\n    break\n  }\n  else {\n    x[i] &lt;- y\n  }\n}\nprint(x)\n\n [1] 3.009607011 1.747037518 0.009051793 2.639894288 0.031970168 0.806483766\n [7] 1.179765100 0.988156031          NA          NA          NA          NA\n[13]          NA          NA          NA          NA          NA          NA\n[19]          NA          NA          NA          NA          NA          NA\n[25]          NA          NA          NA          NA          NA          NA\n\nprint(y)\n\n[1] -0.8466751\n\n\nNotice that the vector does not get filled up all the way, that is because the loop will break once a negative number is simulated",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#next",
    "href": "control_flow.html#next",
    "title": "17  Control Flow",
    "section": "17.5 next",
    "text": "17.5 next\nSimilar to the break statement, the next statement is used in loops that will tell R to move on to the next iteration if a certain condition is met.\n\n\n\n\n\n\nImportant Note\n\n\n\n\nfor (i in vector){\n  if (condition) {\n    next\n  } else {\n    task\n  }\n}\n\n\n\nThe main difference here is that a next statement is used instead of a break statement.\nGoing back to simulating positive numbers, we will use the same setup but change it to a next statement.\n\nx &lt;- rep(NA,length = 30)\n\nfor (i in seq_along(x)){\n  y &lt;- rnorm(1,1)\n  if (y&lt;0) {\n    next\n  }\n  else {\n    x[i] &lt;- y\n  }\n}\nprint(x)\n\n [1]         NA 0.08434672 0.19266022 0.93514835 0.37863155 3.05972163\n [7] 0.67965939         NA 1.98519534 1.32500968 2.27779096         NA\n[13] 0.62074909 0.81493670         NA 2.84606579         NA         NA\n[19] 0.80236841 1.55437266 1.33713662         NA 2.55112123 0.92611312\n[25] 0.13670821 0.10804522 1.71180908         NA 0.28771324         NA\n\n\nAs you can see, the vector contains missing values, these were the iterations that a negative number was simulated.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#while-loop",
    "href": "control_flow.html#while-loop",
    "title": "17  Control Flow",
    "section": "17.6 while loop",
    "text": "17.6 while loop\nThe last loop that we will discuss is a while loop. The while loop is used to keep a loop running until a certain condition is met. To construct a while loop, we will use the while statement with a condition attached to it. In general, a while loop will have the following format:\n\n\n\n\n\n\nImportant Concept\n\n\n\n\nwhile (condition) {\n  task\n  update condition\n}\n\n\n\nAbove, we see that the while statement is used followed by a condition. Then the loop will complete its task and update the condition. If the condition yields a FALSE value, then the loop will stop. Otherwise, it will continue.\n\n17.6.1 Basic while loops\nTo implement a basic while loop, we will work on the previous example of simulating positive numbers. We want to simulate 30 positive numbers from \\(N(0,1)\\) until we have 30 values. Here, our condition is that we need to have 30 numbers. Therefore we can use the following code to simulate the values:\n\nx &lt;- c()\nsize &lt;- 0\nwhile (size &lt; 30){\n  y &lt;- rnorm(1) \n  if (y &gt; 0) {\n    x &lt;- c(x, y)\n  }\n  size &lt;- length(x)\n}\nprint(size)\n\n[1] 30\n\nprint(x)\n\n [1] 1.51226883 0.94128412 0.42442648 1.19819679 0.61146695 0.65229603\n [7] 0.26982918 1.21059288 0.24266199 0.72237650 1.17817474 0.24697971\n[13] 1.05914149 0.06194373 0.26593369 0.11557476 0.73004580 1.08914004\n[19] 0.25677075 0.40205362 0.60485605 0.31843602 0.80658309 0.04237526\n[25] 0.38548454 1.13262097 0.30707754 0.38771702 0.79045747 0.04956204\n\n\nNotice that we do not use an else statement. This is because we do not need R to complete a task if the condition fails.\n\n\n17.6.2 Infinite while loops\nWith while loops, we must be weary about potential infinite loops. This occurs when the condition will never yield a FALSE value. Therfore, R will never stop the loop because it does not know when to do this.\nFor example, let’s say we are interest if \\(y=sin(x)\\) will converge to a certain value. As you know it will not converge to a certain value; however, we can construct a while loop:\n\nx &lt;- 1\ndiff &lt;- 1\nwhile (diff &gt; 1e-20) {\n  old_x &lt;- x\n  x &lt;- x + 1\n  diff &lt;- abs(sin(x) - sin(old_x))\n}\nprint(x)\nprint(diff)\n\nMy condition above is to see if the absolute difference between sequential values is smaller than \\(10^{-20}\\). As you may know, the absolute difference will never become that small. Therefore, the loop will continue on without stopping.\nTo prevent an infinite while loop, we can add a counter to the condition statement. This counter will also need to be true for the loop to continue. Therefore, we can arbitrarily stop it when the loop has iterated a certain amount of times. We just need to make sure to add one to the counter every time it iterates it. Below is the code that adds a counter to the while loop:\n\nx &lt;- 1\ncounter &lt;- 0\ndiff &lt;- 1\nwhile (diff &gt; 1e-20 & counter &lt; 10^3) {\n  old_x &lt;- x\n  x &lt;- x + 1\n  diff &lt;- abs(sin(x) - sin(old_x))\n  counter &lt;- counter + 1\n}\nprint(x)\n\n[1] 1001\n\nprint(diff)\n\n[1] 0.09311106\n\nprint(counter)\n\n[1] 1000",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "control_flow.html#footnotes",
    "href": "control_flow.html#footnotes",
    "title": "17  Control Flow",
    "section": "",
    "text": "Type this in the console to see what it is.↩︎\ninstall.packages(greekLetters)↩︎\nWe will need to use paste0() to combine the letters together.↩︎",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "functional.html",
    "href": "functional.html",
    "title": "18  Functional Programming",
    "section": "",
    "text": "18.1 Functions\nThe functionality in R is what makes it completely powerful compared to other statistical software. There are several pre-built functions, and you can extend R’s functionality further with the use of R Packages.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "functional.html#functions",
    "href": "functional.html#functions",
    "title": "18  Functional Programming",
    "section": "",
    "text": "18.1.1 Built-in Functions\nThere are several available functions in R to conduct specific statistical methods. The table below provides a set of commonly used functions:\n\n\n\nFunctions\nDescription\n\n\n\n\naov()\nFits an ANOVA Model\n\n\nlm()\nFits a linear model\n\n\nglm()\nFits a general linear model\n\n\nt.test()\nConducts a t-test\n\n\n\nSeveral of these functions have help documentation that provide the following sections:\n\n\n\n\n\n\n\nSection\nDescription\n\n\n\n\nDescription\nProvides a brief introduction of the function\n\n\nUsage\nProvides potential usage of the function\n\n\nArguments\nArguments that the function can take\n\n\nDetails\nAn in depth description of the function\n\n\nValue\nProvides information of the output produced by the function\n\n\nNotes\nAny need to know information about the function\n\n\nAuthors\nDevelopers of the function\n\n\nReferences\nReferences to the model and function\n\n\nSee Also\nProvide information of supporting functions\n\n\nExamples\nExamples of the function\n\n\n\nTo obtain the help documentation of each function, use the ? operator and function name in the console pane.\n\n\n18.1.2 Generic Functions\nCommonly used functions, such as summary() and plot() functions, are considered generic functions where their functionality is determined by the class of an R object. For example, the summary() function is a generic function for several types of functions: summary.aov(), summary.lm(), summary.glm(), and many more. Therefore, the appropriate function is needed depending the type of R object. This is where generic functions come in. We can use a generic function, ie summary(), to read the type of object and then apply to correct procedure to the object.\n\n\n18.1.3 User-built Functions\nWhile R has many capable functions that can be used to analyze your data, you may need to create a custom function for specific needs. For example, if you find yourself writing the same to repeat a task, you can wrap the code into a user-built function and use it for analysis.\nTo create a user-built function, you will using the function() to create an R object that is a function. To use the function Inside the funtion() parentheses, write the arguments that need to specified for your function. These are arguments you choose for the function.\n\n18.1.3.1 Anatomy\nIn general function we construct a function with the following anatomy:\n\nname_of_function &lt;- function(data_1, data_2 = NULL, \n                             argument_1, argument_2 = TRUE, argument_3 = NULL,\n                             ...){\n  # Conduct Task\n  # Conduct Task\n  output_object &lt;- Tasks\n  return(output_object)\n}\n\nHere, we are creating an R function called name_of_function that will take the following arguments: data_1, data_2, argument_1, argument_2, argument_3, and .... From this function, it requires us to supply data for data_1 and argument_1. Arguments data_2 and argument_3 are not required, but can be utilized in the function if necessary. Argument argument_2 is also required for the function, but it it has a default setting (in this case TRUE) if it is not specified. Lastly, the ... argument allows you to pass other arguments to R built in functions if they are present. For example, we may use the plot() to create graphics and want to manipulate the output plot further, but do not want to specify the arguments in the user-based function. In the function itself, we will complete the necessary tasks and then use the return() to return the output.\n\n\n18.1.3.2 Example\nTo begin, let’s create a function that squares any value:\n\nx_square &lt;- function(x){x^2}\n\nAbove, I am creating a new function called x_square and it will take values of x and square it. Here are a couple of examples of x_square():\n\nx_square(4)\n\n[1] 16\n\nx_square(5)\n\n[1] 25\n\n\nThe mtcars data set has several numeric variables that can be used for analysis. Let’s say we want to apply a function (x_square()) to the sum of a specific variable and return the value. Then let’s further complicate the function by allowing the sum of 2 variables, take the log of the sum and dividing the value if necessary. Below is the code for such function called summing:\n\nsumming &lt;- function(vec1, vec2 = NULL, FUN, log_val = FALSE, divisor_val = NULL){\n  FUN &lt;- match.fun(FUN)\n  wk_vec &lt;- c(vec1, vec2)\n  fun_sum_val &lt;- FUN(sum(wk_vec))\n  lval &lt;- NULL\n  if (isTRUE(log_val)){\n    lval &lt;- log(fun_sum_val)\n  } else {\n    lval &lt;- fun_sum_val\n  }\n  if (!is.null(divisor_val)){\n    dval &lt;- divisor_val\n  } else {dval &lt;- 1}\n  output &lt;- lval/dval\n  return(output)\n}\n\nNow let’s try obtaining the\n\nsum(mtcars$mpg)^2\n\n[1] 413320.4\n\nsumming(mtcars$mpg, FUN = x_square)\n\n[1] 413320.4\n\nlog(sum(c(mtcars$mpg,mtcars$disp))^2)\n\n[1] 17.98088\n\nsumming(mtcars$mpg, mtcars$disp, x_square, T)\n\n[1] 17.98088\n\nlog(sum(c(mtcars$mpg,mtcars$disp))^2)/5\n\n[1] 3.596177\n\nsumming(mtcars$mpg, mtcars$disp, x_square, T, 5)\n\n[1] 3.596177",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "functional.html#apply-functions",
    "href": "functional.html#apply-functions",
    "title": "18  Functional Programming",
    "section": "18.2 *apply Functions",
    "text": "18.2 *apply Functions\n*apply functions are used to iterate a function through a set of elements in a vector, matrix, or list. This will then return a vector or list depending on what is requested.\n\n18.2.1 apply()\nThe apply() function is used to apply a function to the margins of an array or matrix. It will iterate between the elements, apply a function to the data, and return a vector, array or list if necessary. To use the apply() function, you will need to specify three arguments, X or the array, MARGIN which margin to apply the function on, and FUN the function.\nBelow we calculate the row means and column means using the apply function for a \\(5 \\times 4\\) matrix containing the elements 1 through 20:\n\nx &lt;- matrix(1:20, nrow = 5, ncol = 4)\n\n# Row Means\napply(x, 1, mean)\n\n[1]  8.5  9.5 10.5 11.5 12.5\n\n# Col Means\napply(x, 2, mean)\n\n[1]  3  8 13 18\n\n\n\n\n18.2.2 lapply()\nThe lapply() function is used to apply a function to all elements in a vector or list. The lapply() function will then return a list as the output.\n\n\n18.2.3 sapply()\nThe sapply() function is used to apply a function to all elements in a vector or list. Afterwards, the sapply() will return a “simplified” version of the list format. This could be a vector, matrix, or array.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "functional.html#anonymous-functions",
    "href": "functional.html#anonymous-functions",
    "title": "18  Functional Programming",
    "section": "18.3 Anonymous Functions",
    "text": "18.3 Anonymous Functions\nAnonymous functions are functions that R temporarily creates to conduct a task. They are commonly used in the *apply functions, piping or within functions. To create an anonymous function, we use the function() to create a function .\nFor example, let x be a vector with the values 1 through 15. Let’s say we want to apply the function \\(f(x) = x^2+\\ln(x) + e^x/x!\\). We can evaluate the function as the expression in the function:\n\nx &lt;- 1:15\nx^2 + log(x) + exp(x)/factorial(x)\n\n [1]   3.718282   8.387675  13.446202  19.661217  27.846214  38.352077\n [7]  51.163496  66.153374  83.219555 102.308655 123.399395 146.485246\n[13] 171.565020 198.639071 227.708053\n\n\nLet’s say we could not do that, we need to evaluate the function for each value of x. We can use the sapply() function with an anonymous function:\n\nsapply(x, function(x) x^2 + log(x) + exp(x) / factorial(x))\n\n [1]   3.718282   8.387675  13.446202  19.661217  27.846214  38.352077\n [7]  51.163496  66.153374  83.219555 102.308655 123.399395 146.485246\n[13] 171.565020 198.639071 227.708053\n\n\nIn R 4.1.0, developers introduce a shortcut approach to create functions. You can create a function using \\() expression, and specify the arguments for your function within the parenthesis. Reworking the previous code, we can use \\() instead of function():\n\nsapply(x, \\(x) x^2 + log(x) + exp(x)/factorial(x))\n\n [1]   3.718282   8.387675  13.446202  19.661217  27.846214  38.352077\n [7]  51.163496  66.153374  83.219555 102.308655 123.399395 146.485246\n[13] 171.565020 198.639071 227.708053\n\nsapply(x, \\(.) .^2 + log(.) + exp(.)/factorial(.))\n\n [1]   3.718282   8.387675  13.446202  19.661217  27.846214  38.352077\n [7]  51.163496  66.153374  83.219555 102.308655 123.399395 146.485246\n[13] 171.565020 198.639071 227.708053\n\n\nNotice that the argument in the anonymous function can be anything.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "scripting.html",
    "href": "scripting.html",
    "title": "19  Scripting and Piping in R",
    "section": "",
    "text": "19.1 Commenting\nA comment is used to describe your code within an R Script. To comment your code in R, you will use the # key, and R will not execute any code after the symbol. The # key can be used to anywhere in the line, from beginning to midway. It will not execute any code coming after the #.\nAdditionally, commenting is a great way to debug long scripts of code or functions. You comment certain lines to see if any errors are being produced. It can be used to test code line by line with out having to delete everything.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Scripting and Piping in R</span>"
    ]
  },
  {
    "objectID": "scripting.html#scripting",
    "href": "scripting.html#scripting",
    "title": "19  Scripting and Piping in R",
    "section": "19.2 Scripting",
    "text": "19.2 Scripting\nWhen writing a script, it is important to follow a basic structure for you to follow your code. While this structure can be anything, the following sections below has my main recommendations for writing a script. The most important part is the Beginning of the Script section.\n\n19.2.1 Beginning of the Script\nLoad any R packages, functions/scripts, and data that you will need for the analysis. I always like to get the date and time of the\n\n## Todays data \nanalysis_data &lt;- format(Sys.time(),\"%Y-%m-%d-%H-%M\")\n\n## R Packages\nlibrary(tidyverse)\nlibrary(magrittr)\n\n## Functions\nsource(\"fxs.R\")\nRcpp::sourceCpp(\"fxs.cpp\")\n\n## Data\ndf1 &lt;- read_csv(\"file.csv\")\ndf2 &lt;- load(\"file.RData\") %&gt;% get\n\n\n\n19.2.2 Middle of the Script\nRun the analysis, including pre and post analysis.\n\n## Pre Analysis\ndf1_prep &lt;- Prep_data(df1)\ndf2_prep &lt;- Prep_data(df2)\n\n## Analysis\ndf1_analysis &lt;- analyze(df1_prep)\ndf2_analysis &lt;- analyze(df2_prep)\n\n## Post Analysis\ndf1_post &lt;- Prep_post(df1_anlysis)\ndf2_post &lt;- Prep_post(df2_anlysis)\n\n\n\n19.2.3 End of the Script\nSave your results in an R Data file:\n\n## Save Results\nres &lt;- list(df1 = list(pre = df1_prep,\n                       analysis = df1_analysis,\n                       post = df1_post),\n            df2 = list(pre = df2_prep,\n                       analysis = df2_analysis,\n                       post = df2_post))\nfile_name &lt;- paste0(\"results_\", analysis_data, \".RData\")\nsave(res, file = file_name)",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Scripting and Piping in R</span>"
    ]
  },
  {
    "objectID": "scripting.html#pipes",
    "href": "scripting.html#pipes",
    "title": "19  Scripting and Piping in R",
    "section": "19.3 Pipes",
    "text": "19.3 Pipes\nIn R, pipes are used to transfer the output from one function to the input of another function. Piping will then allow you to chain functions to run an analysis. Since R 4.1.0, there are two version of pipes, the base R pipe and the pipes from the magrittr package. The table below provides a brief description of each type pipes\n\n\n\n\n\n\n\n\n\nPipe\nName\nPackage\nDescription\n\n\n\n\n|&gt;\nR Pipe\nBase\nThis pipe will use the output of the previous function as the input for the first argument following function.\n\n\n%&gt;%\nForward Pipe\nmagrittr\nThe forward pipe will use the output of the previous function as the input of the following function.\n\n\n%$5\nExposition Pipe\nmagrittr\nThe exposition function will expose the named elements of an R object (or output) to the following function.\n\n\n%T&gt;%\nTee Pipe\nmagrittr\nThe Tee pipe will evaluate the next function using the output of the previous function, but it will not retain the output of the next function and utilize the output of the previous function.\n\n\n%&lt;&gt;%\nAssignment Pipe\nmagrittr\nThe assignment pipe will rewrite the object that is being piped into the next function.\n\n\n\nWhen choosing between Base or magrittr’s pipes, I recommend using magrittr’s pipes due to the extended functionality. However, when writing production code or developing an R package, I recommend using the Base R pipe.\nLastly, when using the pipe, I recommend only stringing a limited amount of functions (~10) to maintain code readability and conciseness. Any more functions may make the code incoherent.\nIf you plan to use magrittr’s pipe, I recommend loading magrittr package instead of tidyverse package.\n\nlibrary(magrittr)\n\n\n19.3.1 |&gt;\nThe base pipe will use the output from the first function and use it as the input of the first argument in the second function. Below, we obtain the mpg variable from mtcars and pipe it in the mean() function.\n\nmtcars$mpg |&gt; mean()\n\n[1] 20.09062\n\n\n\n\n19.3.2 %&gt;%\n\n19.3.2.1 Uses\nMagrittr’s pipe is the equivalent of Base R’s pipe, with some extra functionality. Below we repeat the same code as before:\n\nmtcars$mpg %&gt;% mean()\n\n[1] 20.09062\n\n\nAlternatively, we do not have to type the parenthesis in the second function:\n\nmtcars$mpg %&gt;% mean\n\n[1] 20.09062\n\n\nBelow is another example where we will pipe the value 3 into the rep() with times=5, this will repeat the value 3 five times:\n\n3 %&gt;% rep(5)\n\n[1] 3 3 3 3 3\n\n\nIf we are interested in piping the output to another argument other than the first argument, we can use the (.) placeholder in the second function to indicate which argument should take the previous output. Below, we repeat the vector c(1, 2) three times because the . is in the second argument:\n\n3 %&gt;% rep(c(1,2), .)\n\n[1] 1 2 1 2 1 2\n\n\n\n\n19.3.2.2 Creating Unary Functions\nYou can use %&gt;% and . to create unary functions, a function with one argument, can be created. The following code will create a new function called logsqrt() which evaluates \\(\\sqrt{\\log(x)}\\):\n\nlogsqrt &lt;- . %&gt;% log(base = 10) %&gt;% sqrt\nlogsqrt(10000)\n\n[1] 2\n\nsqrt(log10(10000))\n\n[1] 2\n\n\n\n\n\n19.3.3 %$%\nThe exposition pipe will expose the named elements of an object or output to the following function. For example, we will pipe the mtcars into the lm() function. However, we will use the %$% pipe to access the variables in the data frame for the formula= argument without having to specify the data= argument:\n\nmtcars %$% lm(mpg ~ hp)\n\n\nCall:\nlm(formula = mpg ~ hp)\n\nCoefficients:\n(Intercept)           hp  \n   30.09886     -0.06823  \n\n\n\n\n19.3.4 %T&gt;%\nThe Tee pipe will pipe the contents of the previous function into the following function, but will retain the previous functions output instead of the current function. For example, we use the Tee pipe to push the results from the lm() function to print out the summary table, then use the same lm() function results to print out the model standard error:\n\nx_lm &lt;- mtcars %$% lm(mpg ~ hp) %T&gt;% \n  (\\(x) print(summary(x))) %T&gt;% \n  (\\(x) print(sigma(x)))\n\n\nCall:\nlm(formula = mpg ~ hp)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.7121 -2.1122 -0.8854  1.5819  8.2360 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***\nhp          -0.06823    0.01012  -6.742 1.79e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.863 on 30 degrees of freedom\nMultiple R-squared:  0.6024,    Adjusted R-squared:  0.5892 \nF-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07\n\n[1] 3.862962",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Scripting and Piping in R</span>"
    ]
  },
  {
    "objectID": "scripting.html#keyboard-shortcuts",
    "href": "scripting.html#keyboard-shortcuts",
    "title": "19  Scripting and Piping in R",
    "section": "19.4 Keyboard Shortcuts",
    "text": "19.4 Keyboard Shortcuts\nBelow is a list of recommended keyboard shortcuts:\n\n\n\nShortcut\nWindows/Linux\nMac\n\n\n\n\n%&gt;%\nCtrl+Shift+M\nCmd+Shift+M\n\n\nRun Current Line\nCtrl+Enter\nCmd+Return\n\n\nRun Current Chunk\nCtrl+Shift+Enter\nCmd+Shift+Enter\n\n\nKnit Document\nCtrl+Shift+K\nCmd+Shift+K\n\n\nAdd Cursor Below\nCtrl+Alt+Down\nCmd+Alt+Down\n\n\nComment Line\nCtrl+Shift+C\nCmd+Shift+C\n\n\n\nI recommend modify these keyboard shortcuts in RStudio\n\n\n\nShortcut\nWindows/Linux\nMac\n\n\n\n\n%in%\nCtrl+Shift+I\nCmd+Shift+I\n\n\n%$%\nCtrl+Shift+D\nCmd+Shift+D\n\n\n%T&gt;%\nCtrl+Shift+T\nCmd+Shift+T\n\n\n\nNote you will need to install the extraInserts package:\n\nremotes::install_github('konradzdeb/extraInserts')",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Scripting and Piping in R</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "20  Further Resources",
    "section": "",
    "text": "20.1 R Resources",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Further Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#r-resources",
    "href": "resources.html#r-resources",
    "title": "20  Further Resources",
    "section": "",
    "text": "20.1.1 Programming\nAdvanced R Efficient Prograaming in R\n\n\n20.1.2 Reticulate and Python\nReticulate\n\n\n20.1.3 Rcpp\nRcpp Website",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Further Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#bayesian-programs",
    "href": "resources.html#bayesian-programs",
    "title": "20  Further Resources",
    "section": "20.2 Bayesian Programs",
    "text": "20.2 Bayesian Programs\n\n20.2.1 JAGS\nJAGS rjags\n\n\n20.2.2 Stan\nStan cmdstanr",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Further Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#misc",
    "href": "resources.html#misc",
    "title": "20  Further Resources",
    "section": "20.3 Misc",
    "text": "20.3 Misc\n\n20.3.1 Missing Semester\nThis is a great website containing basic information that you may need to know.",
    "crumbs": [
      "R Programming",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Further Resources</span>"
    ]
  }
]