{
  "hash": "9affcd758dd098a2dcd4570a2ffc9f10",
  "result": {
    "markdown": "# Data Summarization\n\n## Descriptive Statistics\n\nHere, we will go over some of the basic syntax to obtain basic statistics. We will use the variables `mpg` and `cyl` from the `mtcars` data set. To view the data set use the `head()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n\n\n\nThe variable `mpg` would be used as a continuous variable, and the variable `cyl` would be used as a categorical variable.\n\n### Point Estimates\n\nThe first basic statistic you can compute are point estimates. These are your means, medians, etc. Here we will calculate these estimates. \n\n#### Mean\n\nTo obtain the mean, use the `mean()`, you only need to specify `x=` for the data to compute the mean:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20.09062\n```\n:::\n:::\n\n\n\n\n#### Median\n\nTo obtain the median, use the `median()`, you only need to specify `x=` for the data to compute the median:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19.2\n```\n:::\n:::\n\n\n\n\n\n#### Frequency\n\nTo obtain a frequency table, use the `table()`, you only need to specify the data as the first argument to compute the frequency table:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(mtcars$cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 4  6  8 \n11  7 14 \n```\n:::\n:::\n\n\n\n\n#### Proportion\n\nTo obtain a the proportions for the frequency table, use the `prop.table()`. However the first argument must be the results from the `table()`. Use the `table()` inside the `prop.table()` to get the proportions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(mtcars$cyl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n      4       6       8 \n0.34375 0.21875 0.43750 \n```\n:::\n:::\n\n\n\n\n### Variability\n\nIn addition to point estimates, variability is an important statistic to report to let a user know about the spread of the data. Here we will calculate certain variability statistics.\n\n#### Variance\n\nTo obtain the variance, use the `var()`, you only need to specify `x=` for the data to compute the variance:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36.3241\n```\n:::\n:::\n\n\n\n\n#### Standard deviation\n\nTo obtain the standard deviation, use the `sd()`, you only need to specify `x=` for the data to compute the standard deviation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.026948\n```\n:::\n:::\n\n\n\n\n#### Max and Min\n\nTo obtain the max and min, use the `max()` and `min()`, respectively. You only need to specify the data as the first argument to compute the max and min:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33.9\n```\n:::\n\n```{.r .cell-code}\nmin(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.4\n```\n:::\n:::\n\n\n\n\n#### Q1 and Q3\n\nTo obtain the Q1 and Q3, use the `quantile()` and specify the desired quantile with `probs=`. You only need to specify the data as the first argument and `probs=` (as a decimal) to compute the Q1 and Q3:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(mtcars$mpg, .25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   25% \n15.425 \n```\n:::\n\n```{.r .cell-code}\nquantile(mtcars$mpg, .75)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 75% \n22.8 \n```\n:::\n:::\n\n\n\n\n### Associations\n\nIn statistics, we may be interested on how different variables are related to each other. These associations can be represented in a numerical value.\n\n#### Continuous and Continuous\n\nWhen we measure the association between to continuous variables, we tend to use a correlation statistic. This statistic tells us how linearly associated are the variables are to each other. Essentially, as one variable increases, what happens to the other variable? Does it increase (positive association) or does it decrease (negative association). To find the correlation in R, use the `cor()`. You will need to specify the `x=` and `y=` which represents vectors for each variable. Find the correlation between `mpg` and `hp` from the `mtcars` data set.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(mtcars$mpg, mtcars$hp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.7761684\n```\n:::\n:::\n\n\n\n\n#### Categorical and Continuous\n\nWhen comparing categorical variables, it becomes a bit more nuanced in how to report associations. Most of time you will discuss key differences in certain groups. Here, we will talk about how to get the means for different groups of data. Our continuous variable is the `mpg` variable, and our categorical variable is the `cyl` variable. Both are from the `mtcars` data set.  The `tapply()` allows us to split the data into different groups and then calculate different statistics. We only need to specify `X=` of the R object to split, `INDEX=` which is a list of factors or categories indicating how to split the data set, and `FUN=` which is the function that needs to be computed. Use the `tapply()` and find the mean `mpg` for each `cyl` group: 4, 5, and 6.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(mtcars$mpg, list(mtcars$cyl), mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       4        6        8 \n26.66364 19.74286 15.10000 \n```\n:::\n:::\n\n\n\n\n#### Categorical and Categorical\n\nReporting the association between two categorical variables is may be challenging. If you have a $2\\times 2$ table, you can report a ratio of association. However, any other case may be challenging. You can report a hypothesis test to indicate an association, but it does not provide much information about the effect of each variable. You can also report row, column, or table proportions. Here we will talk about creating cross tables and report these proportions. To create a cross table, use the `table()` and use the first two arguments to specify the two categorical variables. Create a cross tabulation between `cyl` and `carb` from the `mtcars` data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(mtcars$cyl, mtcars$carb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n    1 2 3 4 6 8\n  4 5 6 0 0 0 0\n  6 2 0 0 4 1 0\n  8 0 4 3 6 0 1\n```\n:::\n:::\n\n\n\n\nNotice how the first argument is represented in the rows and the second argument is in the columns. Now create table proportions using both of the variables. You first need to create the table and store it in a variable and then use the `prop.table()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(mtcars$cyl, mtcars$carb))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n          1       2       3       4       6       8\n  4 0.15625 0.18750 0.00000 0.00000 0.00000 0.00000\n  6 0.06250 0.00000 0.00000 0.12500 0.03125 0.00000\n  8 0.00000 0.12500 0.09375 0.18750 0.00000 0.03125\n```\n:::\n:::\n\n\n\n\nTo get the row proportions, use the argument `margin = 1` within the `prop.table()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(mtcars$cyl, mtcars$carb), \n           margin = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n             1          2          3          4          6          8\n  4 0.45454545 0.54545455 0.00000000 0.00000000 0.00000000 0.00000000\n  6 0.28571429 0.00000000 0.00000000 0.57142857 0.14285714 0.00000000\n  8 0.00000000 0.28571429 0.21428571 0.42857143 0.00000000 0.07142857\n```\n:::\n:::\n\n\n\n\nTo get the column proportions, use the argument `margin = 2` within the `prop.table()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(mtcars$cyl, mtcars$carb), \n           margin = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n            1         2         3         4         6         8\n  4 0.7142857 0.6000000 0.0000000 0.0000000 0.0000000 0.0000000\n  6 0.2857143 0.0000000 0.0000000 0.4000000 1.0000000 0.0000000\n  8 0.0000000 0.4000000 1.0000000 0.6000000 0.0000000 1.0000000\n```\n:::\n:::\n\n\n\n\n\n## Summarizing with Tidyverse\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()   masks magrittr::extract()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ purrr::set_names() masks magrittr::set_names()\n```\n:::\n\n```{.r .cell-code}\nf <- function(x){\n  mtcars %>% split(~.$cyl) %>% map(~shapiro.test(.$mpg)) \n  return(1)}\ng <- function(x){\n  mtcars %>% group_by(cyl) %>% nest() %>% mutate(shapiro = map(data, ~shapiro.test(.$mpg)))\n  return(1)}\nbench::mark(f(1),g(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f(1)        402.2µs  433.5µs    2255.   134.23KB    17.0 \n2 g(1)         11.5ms   11.7ms      84.0    3.65MB     9.08\n```\n:::\n:::\n",
    "supporting": [
      "data_summary_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}