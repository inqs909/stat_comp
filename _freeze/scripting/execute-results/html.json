{
  "hash": "0012dcfb51e0d6d743408daf07808db2",
  "result": {
    "engine": "knitr",
    "markdown": "# Scripting and Piping in R\n\n## Commenting\n\nA comment is used to describe your code within an R Script. To comment your code in R, you will use the `#` key, and R will not execute any code after the symbol. The `#` key can be used to anywhere in the line, from beginning to midway. It will not execute any code coming after the `#`.\n\nAdditionally, commenting is a great way to debug long scripts of code or functions. You comment certain lines to see if any errors are being produced. It can be used to test code line by line with out having to delete everything.\n\n## Scripting\n\nWhen writing a script, it is important to follow a basic structure for you to follow your code. While this structure can be anything, the following sections below has my main recommendations for writing a script. The most important part is the **Beginning of the Script** section.\n\n### Beginning of the Script\n\nLoad any R packages, functions/scripts, and data that you will need for the analysis. I always like to get the date and time of the\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Todays data \nanalysis_data <- format(Sys.time(),\"%Y-%m-%d-%H-%M\")\n\n## R Packages\nlibrary(tidyverse)\nlibrary(magrittr)\n\n## Functions\nsource(\"fxs.R\")\nRcpp::sourceCpp(\"fxs.cpp\")\n\n## Data\ndf1 <- read_csv(\"file.csv\")\ndf2 <- load(\"file.RData\") %>% get\n```\n:::\n\n\n### Middle of the Script\n\nRun the analysis, including pre and post analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Pre Analysis\ndf1_prep <- Prep_data(df1)\ndf2_prep <- Prep_data(df2)\n\n## Analysis\ndf1_analysis <- analyze(df1_prep)\ndf2_analysis <- analyze(df2_prep)\n\n## Post Analysis\ndf1_post <- Prep_post(df1_anlysis)\ndf2_post <- Prep_post(df2_anlysis)\n```\n:::\n\n\n### End of the Script\n\nSave your results in an R Data file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Save Results\nres <- list(df1 = list(pre = df1_prep,\n                       analysis = df1_analysis,\n                       post = df1_post),\n            df2 = list(pre = df2_prep,\n                       analysis = df2_analysis,\n                       post = df2_post))\nfile_name <- paste0(\"results_\", analysis_data, \".RData\")\nsave(res, file = file_name)\n```\n:::\n\n\n## Pipes\n\nIn R, pipes are used to transfer the output from one function to the input of another function. Piping will then allow you to chain functions to run an analysis. Since R 4.1.0, there are two version of pipes, the base R pipe and the pipes from the [magrittr](https://magrittr.tidyverse.org/) package. The table below provides a brief description of each type pipes\n\n| Pipe   | Name            | Package  | Description                                                                                                                                                                                     |\n|---------------|---------------|---------------|---------------------------|\n| `|>`   | R Pipe          | Base     | This pipe will use the output of the previous function as the input for the first argument following function.                                                                                  |\n| `%>%`  | Forward Pipe    | magrittr | The forward pipe will use the output of the previous function as the input of the following function.                                                                                           |\n| `%$5`  | Exposition Pipe | magrittr | The exposition function will expose the named elements of an R object (or output) to the following function.                                                                                    |\n| `%T>%` | Tee Pipe        | magrittr | The Tee pipe will evaluate the next function using the output of the previous function, but it will not retain the output of the next function and utilize the output of the previous function. |\n| `%<>%` | Assignment Pipe | magrittr | The assignment pipe will rewrite the object that is being piped into the next function.                                                                                                         |\n\nWhen choosing between Base or magrittr's pipes, I recommend using magrittr's pipes due to the extended functionality. However, when writing production code or developing an R package, I recommend using the Base R pipe.\n\nLastly, when using the pipe, I recommend only stringing a limited amount of functions (\\~10) to maintain code readability and conciseness. Any more functions may make the code incoherent.\n\nIf you plan to use magrittr's pipe, I recommend loading `magrittr` package instead of `tidyverse` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\n```\n:::\n\n\n### `|>`\n\nThe base pipe will use the output from the first function and use it as the input of the first argument in the second function. Below, we obtain the `mpg` variable from `mtcars` and pipe it in the `mean()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$mpg |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n### `%>%`\n\n#### Uses\n\nMagrittr's pipe is the equivalent of Base R's pipe, with some extra functionality. Below we repeat the same code as before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$mpg %>% mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\nAlternatively, we do not have to type the parenthesis in the second function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$mpg %>% mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\nBelow is another example where we will pipe the value `3` into the `rep()` with `times=5`, this will repeat the value `3` five times:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 %>% rep(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 3 3 3 3\n```\n\n\n:::\n:::\n\n\nIf we are interested in piping the output to another argument other than the first argument, we can use the (`.`) placeholder in the second function to indicate which argument should take the previous output. Below, we repeat the vector `c(1, 2)` three times because the `.` is in the second argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 %>% rep(c(1,2), .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 1 2 1 2\n```\n\n\n:::\n:::\n\n\n#### Creating Unary Functions\n\nYou can use `%>%` and `.` to create unary functions, a function with one argument, can be created. The following code will create a new function called `logsqrt()` which evaluates $\\sqrt{\\log(x)}$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogsqrt <- . %>% log(base = 10) %>% sqrt\nlogsqrt(10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(log10(10000))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n### `%$%`\n\nThe exposition pipe will expose the named elements of an object or output to the following function. For example, we will pipe the `mtcars` into the `lm()` function. However, we will use the `%$%` pipe to access the variables in the data frame for the `formula=` argument without having to specify the `data=` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %$% lm(mpg ~ hp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = mpg ~ hp)\n\nCoefficients:\n(Intercept)           hp  \n   30.09886     -0.06823  \n```\n\n\n:::\n:::\n\n\n### `%T>%`\n\nThe Tee pipe will pipe the contents of the previous function into the following function, but will retain the previous functions output instead of the current function. For example, we use the Tee pipe to push the results from the `lm()` function to print out the summary table, then use the same `lm()` function results to print out the model standard error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_lm <- mtcars %$% lm(mpg ~ hp) %T>% \n  (\\(x) print(summary(x))) %T>% \n  (\\(x) print(sigma(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = mpg ~ hp)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.7121 -2.1122 -0.8854  1.5819  8.2360 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 30.09886    1.63392  18.421  < 2e-16 ***\nhp          -0.06823    0.01012  -6.742 1.79e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.863 on 30 degrees of freedom\nMultiple R-squared:  0.6024,\tAdjusted R-squared:  0.5892 \nF-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07\n\n[1] 3.862962\n```\n\n\n:::\n:::\n\n\n## Keyboard Shortcuts\n\nBelow is a list of recommended keyboard shortcuts:\n\n| Shortcut          | Windows/Linux    | Mac             |\n|-------------------|------------------|-----------------|\n| `%>%`             | Ctrl+Shift+M     | Cmd+Shift+M     |\n| Run Current Line  | Ctrl+Enter       | Cmd+Return      |\n| Run Current Chunk | Ctrl+Shift+Enter | Cmd+Shift+Enter |\n| Knit Document     | Ctrl+Shift+K     | Cmd+Shift+K     |\n| Add Cursor Below  | Ctrl+Alt+Down    | Cmd+Alt+Down    |\n| Comment Line      | Ctrl+Shift+C     | Cmd+Shift+C     |\n\nI recommend modify these keyboard shortcuts in RStudio\n\n| Shortcut | Windows/Linux | Mac         |\n|----------|---------------|-------------|\n| `%in%`   | Ctrl+Shift+I  | Cmd+Shift+I |\n| `%$%`    | Ctrl+Shift+D  | Cmd+Shift+D |\n| `%T>%`   | Ctrl+Shift+T  | Cmd+Shift+T |\n\nNote you will need to install the `extraInserts` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github('konradzdeb/extraInserts')\n```\n:::\n",
    "supporting": [
      "scripting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}