---
title: "Control Flow"
---

## Indexing

### Vectors

In the @sec-r-objects, we discussed about different types of R objects. For example, a vector can be a certain data type with a set number of elements. Here we construct a vector called `x` increasing from -5 to 5 by one unit:

```{r}
(x <- -5:5)
```

The vector `x` has 11 elements. If I want to know what the 6th element of `x`, I can index the 6th element from a vector. To do this, we use `[]` square brackets on `x` to index it. For example, we index the 6th element of `x`:

```{r}
x[6]
```

When ever we use `[]` next to an R object, it will print out the data to a specific value inside the square brackets. We can index an R object with multiple values:

```{r}
x[1:3]
x[c(3,9)]
```

Notice how the second line uses the `c()`. This is necessary when we want to specify non-contiguous elements. Now let's see how we can index a matrix

### Matrices

A matrix can be indexed the same way as a vector using the `[]` brackets. However, since the matrix is a 2-dimensional objects, we will need to include a comma to represent the different dimensions: `[,]`. The first element indexes the row and the second element indexes the columns. To begin, we create the following $4 \times 3$ matrix:

```{r}
(x <- matrix(1:12, nrow = 4, ncol = 3))
```

Now to index the element at row 2 and column 3, use `x[2, 3]`:

```{r}
x[2, 3]
```

We can also index a specific row and column:

```{r}
x[2,]
x[,3]
```

### Data Frames

There are several ways to index a data frame, since it is in a matrix format, you can index it the same way as a matrix. Here are a couple of examples using the `mtcars` data frame.

```{r}
mtcars[,2]
mtcars[2,]
```
However, a data frame has labeled components, variables, we can index the data frame with the variable names within the brackets:

```{r}
mtcars[, "cyl"]
```

Lastly, a data frame can be indexed to a specific variable using the `$` notation as described in @sec-basic-data-frames.

### Lists

As described in @sec-basics-lists, lists contain elements holding different R objects. To index a specific element of a list, you will use `[[]]` double brackets. Below is a toy list:

```{r}
toy_list <- list(mtcars = mtcars,
                 vector = rep(0, 4),
                 identity = diag(rep(1, 3)))
```


To access the second element, vector element, you can type `toy_list[[2]]`

```{r}
toy_list[[2]]
```
Since the elements are labeled within the list, you can place the label in quotes inside `[[]]`:

```{r}
toy_list[["vector"]]
```

The element can be accessed using the `$` notation with a list:

```{r}
toy_list$vector
```

Lastly, you can further index the list if needed, we can access the `mpg` variable in `mtcars` from the `toy_list`:

```{r}
toy_list$mtcars$mpg
toy_list[["mtcars"]]$mpg
toy_list$mtcars[,'mpg']
```


## If/Else Statements


In R, there are control flow functions that will dictate how a program will be executed.
The first set of functions we will talk about are `if` and `else` statements. First, the `if` statement will evaluate a task, If the conditions is satisfied, yields `TRUE`, then it will conduct a certain task, if it fails, yields `FALSE`, the `else` statement will guide it to a different task. Below is a general format:



:::{.callout-note icon="false"}
## Important Concept

```{r}
#| eval: false

if (condition) {
  TRUE task
} else {
  FALSE task
}
```
:::



### Example

Below is an example where we generate `x` from a standard normal distribution and print the statement 'positive' or  'non-positive' based on the condition `x > 0`.


```{r}
x <- rnorm(1)

## if statements
if (x > 0){
  print("Positive")
} else {
  print("Non-Positive")
}
```

What if we want to print the statement 'negative' as well if the value is negative? We will then need to add another `if` statement after the `else` statement since `x > 0` only lets us know if the value is positive.

```{r}
x <- rnorm(1)

if (x > 0){
  print("Positive")
} else if (x < 0) {
  print("Negative")
}
```

Above, we add the `if` statement with condition `(x < 0)` indicating if the number is negative. Lastly, if `x` is ever $0$, we will want R to let us know it is $0$. We can achieve this by adding one last `else` statement:

```{r}
x <- rnorm(1)

if (x > 0){
  print("Positive")
} else if (x < 0) {
  print("Negative")
} else {
  print("Zero")
}
```

## `for` loops

A for `loop` is a way to repeat a task a certain amount of times. Every time a loop repeats a task, we state it is an iteration of the loop. For each iteration, we may change the inputs by a certain way, either from an indexed vector, and repeat the task. The general anatomy of a loop looks like:


:::{.callout-note appearance='default' icon=false}
## Important Concept

```{r}
#| eval: false

for (i in vector){
  perform task
}
```
:::


The `for` statement indicates that you will repeat a task inside the brackets. The `i` in the parenthesis controls how the task will be completed. The `in` statement tells R where `i` can look for the values, and `vectorr` is a vector R object that contains the values `i` can be. It also controls how many times the task will be repeated based on the length of the vector.  

Learning about a loop is quite challenging, my recommendation is to read the section below and break the example code so you can understand how a `for` loop works.

### Basic `for` loop

Let's say we want R to print one to five separately. We can achieve this by repeating the `print()` 5 times.

```{r}
print(1); print(2); print(3); print(4); print(5)
```

However, this takes quite awhile to type up. Let's try to achieve the same task using a `for` loop. 

```{r}
for (i in 1:5){
  print(i)
}
```

Here, `i` will take a value from the vector `1:5`,^[Type this in the console to see what it is.] Then, R will print out what the value of `i` is.

Now, let's try another example with letters. To begin, create a new vector called `letters_10` containing the first 10 letters of the alphabet. Use the vector `letters` to construct the neww vector.

```{r}
letters_10 <- letters[1:10]
```

Now, we will use a loop to print out the first 10 letters:

```{r}
for (i in 1:10) {
  print(letters_10[i])
}
```

Here, we have `i` take on the values 1 through 10. Using those values, we will index the vector `letters_10` by `i`. The resulting letter will then be printed. This task repeated 10 times.

Lastly, we can replace `1:10` by `letters_10` instead:


```{r}
for (i in letters_10){
  print(i)
}
```

This is because `letters_10` are the values that we want to print and `i` takes on the value of `letters_10` each time.

### Nested `for` loops

A nested `for` loop is a loop that contain a loop within. Below is an example of 3 `for` loops nested within each other. Below is a general example:


:::{.callout-note appearance='default' icon="false"}
## Important Concept

```{r}
#| eval: false

for (i in vector_1) {
  for (ii in vector_2) {
    for (iii in vector_3) {
      perform task
    }
  }
}

```

:::


As an example, we will use the `greekLetter::`^[`install.packages(greekLetters)`] and use the `greek_vector` vector to obtain greek letters in R. Lastly, create a vector called `greek_10`.

```{r}
library(greekLetters)
greek_10 <- greek_vector[1:10]
```


For this example, we want R to print "a" and "$\alpha$" together as demonstrated below^[We will need to use `paste0()` to combine the letters together.]:

```{r}
print(paste0(letters_10[1], greek_10[1]))
```

Now let's repeat this process to print all possible combinations of the first 3 letters and 3 greek letters:

```{r}
for (i in 1:3){
  for (ii in 1:3){
    print(paste0(letters_10[i], greek_10[ii]))
  }
}
```


## `break`

A `break` statement is used to stop a loop midway if a certain condition is met. A general setup of `break` statement goes as follows: 

:::{.callout-note appearance='default' icon="false"}
## Important Concept

```{r}
#| eval: false
for (i in vector){
  if (condition) {break}
  else {
    task
  }
}
```
:::

As you can see there is an `if` statement in the loop. This is used to tell R when to break the loop. If the `if` statement was not there, then the loop will break without iterating. 

To demonstrate the break statement, we will simulate from a $N(1,1)$ until we have 30 positive numbers or we simulate a negative number.


```{r}
x <- rep(NA,length = 30)

for (i in seq_along(x)){
  y <- rnorm(1,1)
  if (y<0) {
    break
  }
  else {
    x[i] <- y
  }
}
print(x)
print(y)
```

Notice that the vector does not get filled up all the way, that is because the loop will break once a negative number is simulated

## `next`

Similar to the `break` statement, the `next` statement is used in loops that will tell R to move on to the next iteration if a certain condition is met. 

:::{.callout-note appearance='default' icon="false"}
## Important Note

```{r}
#| eval: false
for (i in vector){
  if (condition) {
    next
  } else {
    task
  }
}
```

:::

The main difference here is that a `next` statement is used instead of a `break` statement.

Going back to simulating positive numbers, we will use the same setup but change it to a `next` statement.

```{r}
x <- rep(NA,length = 30)

for (i in seq_along(x)){
  y <- rnorm(1,1)
  if (y<0) {
    next
  }
  else {
    x[i] <- y
  }
}
print(x)
```

As you can see, the vector contains missing values, these were the iterations that a negative number was simulated.

## `while` loops

### Basic `while` loops

```{r}
# Control Flow: While Loops -----
x <- -5:5
plot(x, exp(x), type = "l")

## Asymptotic -----
abs(exp(-14)-exp(-13))

## while statements -----
# while (condition) {
#   
# }


## while loops ----
x <- 1
diff <- 1
while (diff > 1e-20) {
  old_x <- x
  x <- x + 1
  diff <- abs(1/exp(x) - 1/exp(old_x))
}
print(x)
print(diff)


```

### Infinite `while` loops

```{r}
#| eval: false
# Control Flow: Infinite While Loops -----
(y <- rnorm(1))
z <- as.integer(2)

# logical operator &
is.integer(z) & z > 0
is.integer(y) & y > 0

x <- -50:50
plot(x, sin(x), type = "l")

## Asymptotic -----
abs(exp(13)-exp(12))

## inf while loops ----
x <- 1
diff <- 1
# while (diff > 1e-20) {
#   old_x <- x
#   x <- x + 1
#   diff <- abs(exp(x) - exp(old_x))
# }
print(x)
print(diff)

x <- 1
diff <- 1
while (diff > 1e-20) {
  old_x <- x
  x <- x + 1
  diff <- abs(sin(x) - sin(old_x))
}
print(x)
print(diff)

```

```{r}
## while loops ----
x <- 1
counter <- 0
diff <- 1
while (diff > 1e-20 & counter < 30) {
  old_x <- x
  x <- x + 1
  diff <- abs(exp(x) - exp(old_x))
  counter <- counter + 1
}
print(x)
print(diff)
print(counter)

x <- 1
counter <- 0
diff <- 1
while (diff > 1e-20 & counter < 10^3) {
  old_x <- x
  x <- x + 1
  diff <- abs(sin(x) - sin(old_x))
  counter <- counter + 1
}
print(x)
print(diff)
print(counter)

```
